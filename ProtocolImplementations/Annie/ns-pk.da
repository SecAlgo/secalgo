"""
  (1) A -> S : (A, B)
  (2) S -> A : sign((B, pkB), skS)
  (3) A -> B : enc((Na, A), pkB)
  (4) B -> S : (B, A)
  (5) S -> B : sign((A, pkA), skS)
  (6) B -> A : enc((Na, Nb), pkA)
  (7) A -> B : enc(Nb, pkB)
did fix for (6):
  (6) B -> A : enc((Na, Nb, B), pkA)
"""

""" commented out due to a bug in v1.0.1
def gen_num():
  i = 0
  while True: 
    i += 1
    yield i

gen_nonce = gen_num()

def nonce(): return next(gen_nonce)
"""
def nonce(): return 0
def pk(p): return p
def enc(m,k): return m
def dec(m,k): return m
def sign(m,k): return m
def check(m,k): return m

class roleS (process):
  def send(m, to= None): super().send (m, to= to); output('send', m, 'to', to)

  def setup(skS): pass
  def run(): await (False)

  def receive (msg=(A, B), from_= A):                          # receive 1, 4
    send (('signed', sign((B, pk(B)), skS)), to= A)            # send 2, 5

class roleA (process):
  def send(m, to= None): super().send (m, to= to); output('send', m, 'to', to)

  def setup(skA, S, B): self.A = self
  def run():
    send ((A, B), to= S)                                       # send 1
    await (some (received(((_B, pkB), _S), from_= self)))      # receive 2
    Na = nonce()
    send (('pub_enc', enc((Na, A), pkB)), to= B)               # send 3
    await (some (received(((_Na, Nb, _B), _B), from_= self)))  # receive 6
    send (('pub_enc', enc(Nb, pkB)), to= B)                    # send 7

  def receive (msg=('signed', m), from_= S):
    send ((check(m, pk(S)), S), to= self)

  def receive (msg=('pub_enc', m), from_= B):
    send ((dec(m, skA), B), to= self)

class roleB (process):
  def send(m, to= None): super().send (m, to= to); output('send', m, 'to', to)

  def setup(skB, S): self.B = self
  def run(): await (False)

  def receive (msg= ((Na, A), A), from_= self):                # receive 3
    send ((B, A), to= S)                                       # send 4
    await (some (received(((_A, pkA), _S), from_= self)))      # receive 5
    Nb = nonce()
    send (('pub_enc', enc((Na, Nb, B), pkA)), to= A)           # send 6

  def receive (msg=('signed', m), from_= S):
    send ((check(m, pk(S)), S), to= self)

  def receive (msg=('pub_enc', m), from_= A):
    send ((dec(m, skB), A), to= self)

def main():
  skS = 0
  skA = 1
  skB = 2
  S = new(roleS, (skS,))
  B = new(roleB, (skB, S))
  A = new(roleA, (skA, S, B))
  start(S)
  start(A)
  start(B)

# 11/13/16
# in A:
# the handlers allow "receive" of 2 and 6 to replace the following:
#    await (received(m, from_= S))
#    (=B, pkB) = check(m, pkS)
#
#    await (received(m, from_= B)
#    (=Na, Nb, B) = dec(m, skA)
#
# can abstract "receive" to
#    await receive_decrypted(m, from_= sender, by= decryptor)
# and generate "receive" and handler automatically
#
# need unique id for RPC-like receive if a process can be in one sessions,
# and/or poisible some msg tags.
#
# 11/16/16
# can abstract "send" to 
#    send_encrypted(m, key=key_value, to=receiver, by= encryptor)
# and generate "send" with appropriate msg tag for 
# receiver to decide which key to use
#
# even higher-level: just write global msg passing
