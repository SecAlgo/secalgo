import sys
import json
import random
from sa.sec_algo_pycrypto import encrypt, decrypt, sign, verify
from sa.sec_algo_pycrypto import gen_key_pair, get_pub_key
from Crypto.PublicKey.RSA._RSAobj import exportKey
from Crypto.PublicKey.RSA import importKey

#Misc Global Methods

def needed():
    if random.random() < 0.25:
        return True
    else:
        return False
#end needed()

#End Misc Global Methods

class KG_Server(sk):
    def setup():
        self.secret_key = gen_key_pair()
        self.pk = dict()
    #end setup()
    
    def run():
        output('Key Server started...')
        await(False)
    #end run()
    
    def receive(msg=('set-key', cid, client_A, pub_key_A), from_ = setter):
        if client_A == setter:
            self.pk[client_A] = pub_key_A
            send(('re-set-key', cid), to = getter)
    #end receive(msg=('set-key')

    def receive(msg=('req-key', cid, client_A, client_B), from_ = getter):
        await(client_A in self.pk.keys())
        if client_A == getter:
            pub_key_package_B = [self.pk[client_B], serialize_endpoint(client_B)]
            s_pub_key_package_B = json.dumps(pub_key_package_B)
            ss_pub_key_package_B = sign(s_pub_key_package_B, self.secret_key)
            send(('re-get-key', cid, ss_pub_key_package_B), to = getter)
    #end receive(msg=('get-key'))

class NS_PK():
    def setup(s, sk, server_spk, kg_p):
        self.counter = 0
        self.secret_key = importKey(sk)
        self.server_pub_key = importKey(server_spk)
    #end setup()

    def run():
        output('Started...')
        set_pub_key(get_pub_key(self.secret_key))
        if needed():
            self.b = random.choice(tuple(s))
            s = ns_pk(self.b)
            output(s)
            await(False)
        else:
            await(False)
            #end run()
            
    def gen_cid():
        self.counter += 1
        return (serialize_endpoint(self.id), self.counter)
    #end gen_cid()

    def set_pub_key(pub_key):
        cid = gen_cid()
        send(('set-key', cid, self.id, pub_key.exportKey()), to = kg_p)
        await(some(received(('re-set-key', cid), from_ = kg_p)))
    #end set_pub_key()

    def req_pub_key(client_B):
        cid = gen_cid()
        send(('req_key', cid, self.id, client_B), to = kg_p)
        await(some(received(('re-req-key', _cid, ss_pub_key_package_B), from_ = kg_p)))
        s_pub_key_package_B = verify(ss_pub_key_package_B, self.server_pub_key)
        return json.loads(s_pub_key_package_B)
    #end get_pub_key

    def ns_pk(recipient):
        #msg1 and msg2
        pub_key_package_R = req_pub_key(recipient)
        if deserialize_endpoint(pub_key_package_R[1]) == recipient:
            nonce_I = securerandom.getrandbits(128)
            nonce_package_I = {nonce_I, serialize_endpoint(self.id)}
            s_nonce_package_I = json.dumps(nonce_package_I)
            cs_nonce_package_I = encrypt(s_nonce_package_I, importKey(pub_key_package_R))
            cid = gen_cid()
            send(('msg3', cid, cs_nonce_package_I), to = recipient)
            await(some(received(('msg6', _cid, cs_nonce_package_R), from_ = recipient)))       
    #end ns_pk()

    def receive(msg=('msg3', cid, cs_nonce_package_I), from_ = initiator):
        s_nonce_package_I = decrypt(cs_nonce_package_I, self.secret_key)
        nonce_package_I = json.loads(s_nonce_package_I)
        if deserialize_endpoint(nonce_package_I[1]) == initiator:
            #msg4 and msg5
            pub_key_package_I = req_pub_key(initiator)
            (pub_key_I, client_I) = pub_key_package_I
            if deserialize_endpoint(client_I) == initiator:
                nonce_R = securerandom.getrandbits(128)
                nonce_package_R = [nonce_package_I[0], nonce_R]
                s_nonce_package_R = json.dumps(nonce_package_R)
                cs_nonce_package_R = encrypt(s_nonce_package_R, importKey(pub_key_I))
                send(('msg6', cid, cs_nonce_package_R), to = initator)
                await(some(received(('msg7', _cid, cs_nonce_R), from_ = initator)))
                s_nonce_R = decrypt(cs_nonce_R, self.secret_key)
                if json.loads(s_nonce_R) == nonce_R:
                    output
    #end receive(msg=('msg3'))

def main():
    n = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    ps = new(NS_PK, num = n)
    kg_p = new(KG_Server)
    new_keys = dict()
    new_server_key = gen_key_pair()
    new_server_pub_key = get_pub_key(new_server_key)
    serial_server_pub_key = new_server_pub_key.exportKey()
    for p in ps:
        new_client_key = gen_key_pair()
        new_client_pub_key = get_pub_key(new_client_key)
        serial_client_key = new_client_key.exportKey()
        serial_client_pub_key = new_client_pub_key.exportKey()
        new_keys[p] = serial_client_pub_key
        setup(p, (ps - {p}, serial_client_key, kg_p))
    setup(kg_p, (new_keys, ))
    start(kg_p)
    start(ps)
#end main()
