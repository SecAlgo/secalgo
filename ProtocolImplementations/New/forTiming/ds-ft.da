"""
Simplified Denning-Sacco Key Exchange Protocol
Written by Christopher Kane

Original Source:
Dorothy Denning and Giovanni Sacco, "Timestamps in Key Distribution Protocols",
Communications of the ACM, v.24.8, Aug. 1981. p. 533-536.

Immediate Source:
Bruno Blanchett, "Security Protocol Verification: Symbolic and Computational 
Models", ETAPS Invited Talk, 2012. 

This simplified version removes the keyserver used to distribute the public keys
for A and B.

Protocol Diagram:
  (1) A -> B: enc(sign(k, skA), pkB)
  (2) B -> A: enc(s, k)
"""
import time
from sa.sec_algo_pycrypto import *
configure(sym_mode = 'CFB')

class RoleI (process):
    def setup(skI, R, pkR):
        pass

    def run():
        k = genkey('shared')
        send(('encrypt_sign', encrypt(sign(k, skI), pkR)), to = R)
        await(some(received(m, from_ = R)))
        s = decrypt(m, k)
        output('DECRYPTED MESSAGE:', s)

class RoleR (process):
    def setup(skR, pkI):
        self.s = 'secret'

    def run():
        await(False)

    def receive(msg=('encrypt_sign', m), from_ = I):
        k = verify(decrypt(m, skR), pkI)
        send(encrypt(s, k), to = I)

def main():
    skI, pkI = genkey('public')
    skR, pkR = genkey('public')
    R = new(RoleR, (skR, pkI))
    I = new(RoleI, (skI, R, pkR))
    start(I)
    start(R)
