"""
Diffie-Hellman Key Exchange (DHKE-1)
A protocol based on classical Diffie-Hellman, given in Shoup 1999.
Models available for Scyther, and in Gupta and Shamtikov 2005.

I -> R : g^x, sign((g^x, R), SK_I), cert_I
R -> I : g^y, k, sign(g^x, g^y, k, I), cert_R

g is a generator for a group G of prime order q, all decided in advance. In
Shoup's description, G, g, and q are all treated as a part of I's public key.
I will simulate this by passing this information to each process during its
setup. The certificates, cert_I and cert_R, are certificates granted by a 
Certification Authority linking each participant's public key to their
identity. k is a randomly generated index for a hash function.
"""
from sa.sec_algo_pycrypto import genkey, gen_nonce, sign, verify

class RoleI (process):
    def setup(SK_I, PK_I, cert_I, R, PK_R, g_I, G_I, q_I):
        self.I = self

    def run():
        x = gen_nonce()
        g_exp_x = 1
        send((g_exp_x, sign((g_exp_x, R), key = SK_I), cert_I), to = R)
        await(some(received((g_exp_y, k, m, cert_R), from_ = R)))
        output('I - Authenticated Exchange of Key Material Complete')
        
class RoleR (process):
    def setup(SK_R, PK_R, cert_R, PK_I):
        self.R = self

    def run():
        await(False)

    def receive(g_exp_x, m, cert_I):
        #check signature
        #check certificate
        send((g_exp_y, k, sign((g_exp_x, g_exp_y, k, I), key = SK_R), cert_R), to = I)
        output('R - Authenticated Exchange of Key Material Complete')

def main():
    SK_I, PK_I = genkey('public')
    SK_R, PK_R = genkey('public')
    g_I = 'g'
    G_I = 'G'
    q_I = 'q'
    cert_I = 'cert_I'
    cert_R = 'cert_R'
    R = new(RoleR, (SK_R, PK_R, cert_R, PK_I))
    I = new(RoleI, (SK_I, PK_I, cert_I, R, PK_R, g_I, G_I, q_I))
    start(R)
    start(I)
    
