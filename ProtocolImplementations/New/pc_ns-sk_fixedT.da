"""
Needham-Schroeder Symmetric Key Key Exhange Protocol
Written by Christopher Kane

Original Source:
R. Needham and M. Schroeder. "Authentication revisited". 
Operating Systems Review, 21(7), January 1987.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.fr/Software/spore/nssk_amended.html

Protocol Diagram:
  (1) A -> B : A
  (2) B -> A : enc((A, nB1), kBS)
  (3) A -> S : (A, B, nA, enc((A, nB1), kBS))
  (4) S -> A : enc((nA, kAB, B, enc((kAB, nB1, A), kBS)), kAS)
  (5) A -> B : enc((kAB, nB1, A), kBS)
  (6) B -> A : enc(nB2, kAB)
  (7) A -> B : enc(nB2 - 1, kAB)
"""

import pickle, sys
from sa.timers import dec_proto_run_timer
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random import random
from sa.Misc.Padding import pkcs7_pad, pkcs7_unpad

class RoleS (process):
    def setup(kAS, kBS, loops, test_size):
        Random.atfork()
        self.terminate = False

    @dec_proto_run_timer
    def run():
        terminate = False
        await(terminate)
        reset(received)

    def receive(msg=('msg3', i, (A, B, nA, encBS)), from_ = _A):
        cipher = AES.new(kBS, AES.MODE_CBC, encBS[:AES.block_size])
        if some((_A, nB1) in [pickle.loads(pkcs7_unpad(cipher.decrypt(encBS[AES.block_size:])))]):
            kAB = Random.new().read(test_size)
            ivB = Random.new().read(AES.block_size)
            cipherB = AES.new(kBS, AES.MODE_CBC, ivB)
            ivA = Random.new().read(AES.block_size)
            cipherA = AES.new(kAS, AES.MODE_CBC, ivA)
            send(('msg4', i, ivA + cipherA.encrypt(pkcs7_pad(pickle.dumps((nA, kAB, B,
                    ivB + cipherB.encrypt(pkcs7_pad(pickle.dumps((kAB, nB1, A))))))))), to = A)
        terminate = True

class RoleA (process):
    def setup(S, kAS, B, loops):
        Random.atfork()
        self.i = 1

    @dec_proto_run_timer
    def run():
        send(('msg1', i, self), to = B)
        await(some(received(('msg2', _i, encBS), from_ = _B)))
        nA = random.StrongRandom().getrandbits(128)
        send(('msg3', i, (self, B, nA, encBS)), to = S)
        await(some(received(('msg4', _i, encAS), from_ = _S)))
        cipherAS = AES.new(kAS, AES.MODE_CBC, encAS[:AES.block_size])
        if some((_nA, kAB, _B, encSB) in
                [pickle.loads(pkcs7_unpad(cipherAS.decrypt(encAS[AES.block_size:])))]):
            kABu = kAB[:32]
            send(('msg5', i, encSB), to = B)
            await(some(received(('msg6', _i, encBA), from_ = _B)))
            cipherBA = AES.new(kABu, AES.MODE_CBC, encBA[:AES.block_size])
            nB = pickle.loads(pkcs7_unpad(cipherBA.decrypt(encBA[AES.block_size:])))
            ivAB = Random.new().read(AES.block_size)
            cipherAB = AES.new(kABu, AES.MODE_CBC, ivAB)
            send(('msg7', i, ivAB + cipherAB.encrypt(pkcs7_pad(pickle.dumps((nB - 1))))), to = B)
            #output('A - Key Exchange Complete')
        self.i += 1
        reset(received)

class RoleB (process):
    def setup(S, kBS, loops):
        Random.atfork()
        self.terminate = False

    @dec_proto_run_timer
    def run():
        terminate = False
        await(terminate)
        reset(received)
        
    def receive(msg=('msg1', i, A), from_ = A2):
        if A == A2:
            nB1 = random.StrongRandom().getrandbits(128)
            ivBS = Random.new().read(AES.block_size)
            cipherBS = AES.new(kBS, AES.MODE_CBC, ivBS)
            send(('msg2', i, ivBS + cipherBS.encrypt(pkcs7_pad(pickle.dumps((A, nB1))))), to = A)
            await(some(received(('msg5', _i, encSB), from_ = _A)))
            cipherBS = AES.new(kBS, AES.MODE_CBC, encSB[:AES.block_size])
            if some((kAB, _nB1, _A) in
                    [pickle.loads(pkcs7_unpad(cipherBS.decrypt(encSB[AES.block_size:])))]):
                kABu = kAB[:32]
                nB2 = random.StrongRandom().getrandbits(128)
                ivBA = Random.new().read(AES.block_size)
                cipherBA = AES.new(kABu, AES.MODE_CBC, ivBA)
                send(('msg6', i, ivBA + cipherBA.encrypt(pkcs7_pad(pickle.dumps(nB2)))), to = A)
                await(some(received(('msg7', _i, encAB), from_ = _A)))
                cipherAB = AES.new(kABu, AES.MODE_CBC, encAB[:AES.block_size])
                if ((nB2 - 1) ==
                    pickle.loads(pkcs7_unpad(cipherAB.decrypt(encAB[AES.block_size:])))):
                    pass
                    #output('B - Key Exchange Complete')
        terminate = True
        
def main():
    loops = int(sys.argv[1]) if len(sys.argv) > 1 else 1000
    test_size = int(sys.argv[2]) if len(sys.argv) > 2 else 32
    kAS = Random.new().read(32)
    kBS = Random.new().read(32)
    S = new(RoleS, (kAS, kBS, loops, test_size))
    B = new(RoleB, (S, kBS, loops))
    A = new(RoleA, (S, kAS, B, loops))
    start(S)
    start(B)
    start(A)
