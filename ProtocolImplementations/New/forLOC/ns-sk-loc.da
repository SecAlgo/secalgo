from sa.sec_algo_pycrypto import genkey, encrypt, decrypt, gen_nonce
class RoleS (process):
    def setup(K_IS, K_RS):
        pass
    def run():
        await(False)
    def receive(msg=(I, R, N_I), from_ = I):
        K_IR = genkey('shared')
        send(('encS', encrypt((N_I, K_IR, R, ('encS', encrypt((K_IR, I), K_RS))), K_IS)), to = I)
class RoleI (process):
    def setup(S, K_IS, R):
        self.I = self
        self.K_IR = None
    def run():
        N_I = gen_nonce()
        send((I, R, N_I), to = S)
        await(some(received(((_N_I, K, _R, m), _S), from_ = self)))
        K_IR = K
        send(m, to = R)
        await(some(received(((N_R), _R), from_ = self)))
        send(('encI', encrypt(N_R - 1, K_IR)), to = R)
        output('I - Key Exchange Complete')
    def receive(msg=('encS', m), from_ = S):
        send((decrypt(m, K_IS), S), to = self)
    def receive(msg=('encR', m), from_ = R):
        send((decrypt(m, K_IR), R), to = self)
class RoleR (process):
    def setup(S, K_RS):
        self.R = self
        self.K_IR = None
    def run():
        await(False)
    def receive(msg=((K, I), _S), from_ = self):
        K_IR = K
        N_R = gen_nonce()
        send(('encR', encrypt(N_R, K_IR)), to = I)
        await(some(received(((N_R1), _I), from_ = self), has = N_R1 == N_R - 1))
        output('R - Key Exchange Complete')
    def receive(msg=('encS', m), from_ = I):
        send((decrypt(m, K_RS), S), to = self)
    def receive(msg=('encI', m), from_ = I):
        send((decrypt(m, K_IR), I), to = self)
def main():
    K_IS = genkey('shared')
    K_RS = genkey('shared')
    S = new(RoleS, (K_IS, K_RS))
    R = new(RoleR, (S, K_RS))
    I = new(RoleI, (S, K_IS, R))
    start(S)
    start(R)
    start(I)
