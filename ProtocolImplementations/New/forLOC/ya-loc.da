from sa.sec_algo_pycrypto import genkey, encrypt, decrypt, gen_nonce
class RoleS (process):
    def setup(A, B, K_AS, K_BS):
        self.S = self
    def run():
        await(False)
    def receive(msg=(_B, (_A, N_A, N_B), _B), from_ = self):
        K_AB = genkey('shared')
        send(('encSA', encrypt((B, K_AB, N_A, N_B), K_AS),
              encrypt((A, K_AB), K_BS)), to = A)
    def receive(msg=('encBS', _B, m), from_ = B):
        send((B, decrypt(m, K_BS), B), to = self)
class RoleA (process):
    def setup(B, S, K_AS):
        self.A = self
        self.K_AB = None
    def run():
        N_A = gen_nonce()
        send((A, N_A), to = B)
        await(some(received(((_B, K, _N_A, N_B), encSB, _S), from_ = self)))
        self.K_AB = K
        send(('encSB', encSB, ('encAB', encrypt(N_B, K_AB))), to = B)
        output('A - Key Exchange Complete')
    def receive(msg=('encSA', m, encSB), from_ = S):
        send(((decrypt(m, key = K_AS), encSB, S)), to = self)
class RoleB (process):
    def setup(S, K_BS):
        self.B = self
        self.A1 = None
        self.K_AB = None
    def run():
        await(False)
    def receive(msg=(A, N_A), from_ = A):
        self.A1 = A
        N_B = gen_nonce()
        send(('encBS', B, encrypt((A, N_A, N_B), K_BS)), to = S)
        await(some(received(((_A, K), _S), from_ = self)))
        self.K_AB = K
        await(some(received(((_N_B), _A), from_ = self)))
        output('B - Key Exchange Complete')
    def receive(msg=('encSB', m, encAB), from_ = A):
        send((decrypt(m, K_BS), S), to = self)
        send(encAB, to = self)
    def receive(msg=('encAB', m), from_ = self):
        send((decrypt(m, key = K_AB), A1), to = self)
def main():
    K_AS = genkey('shared')
    K_BS = genkey('shared')
    B = new(RoleB)
    A = new(RoleA)
    S = new(RoleS, (A, B, K_AS, K_BS))
    setup(A, (B, S, K_AS))
    setup(B, (S, K_BS))
    start(S)
    start(B)
    start(A)
