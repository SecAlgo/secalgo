"""
Otway-Rees Key Distribution Protocol
Written by Christopher Kane

Original Source:
Dave Otway and Owen Rees, "Efficient and Timely Mutual Authentication", ACM 
SIGOPS, v.21.1, Jan., 1987, pp. 8-10.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.ens-cachan.fr/Software/spore/otwayRees.html

Protocol Diagram:
  (1) A -> B : M, A, B, enc((nA, M, A, B), kAS)
  (2) B -> S : M, A, B, enc((nA, M, A, B), kAS), enc((nB, M, A, B), kBS)
  (3) S -> B : M, enc((nA, KAB), kAS), enc((nB, kAB), kBS)
  (4) B -> A : M, enc((nA, kAB), kAS)
"""

from sa.secalgo import *

class RoleS (process):
    def setup(kAS, kBS):
        at_fork()

    def run():
        await(False)

    def receive(msg=('msg2', (M, A, B, encAS, encBS)), from_ = B):
        if some((nA, _M, _A, _B) in [decrypt(encAS, key = kAS)]):
            if some((nB, _M, _A, _B) in [decrypt(encBS, key = kBS)]):
                kAB = keygen('shared')
                send(('msg3', (M, encrypt((nA, kAB), key = kAS),
                               encrypt((nB, kAB), key = kBS))), to = B)
    
class RoleA (process):
    def setup(S, kAS, B):
        at_fork()

    def run():
        M = nonce()
        nA = nonce()
        send(('msg1', (M, self, B, encrypt((nA, M, self, B), key = kAS))), to = B)
        await(some(received(('msg4', (_M, encSA)), from_ = _B),
                   has = some((_nA, kAB) in [decrypt(encSA, key = kAS)])))
        output('A - Key Exchange Complete')

class RoleB (process):
    def setup(S, kBS):
        at_fork()

    def run():
        await(False)
        
    def receive(msg=('msg1', (M, A, self, encAS)), from_ = A):
        nB = nonce()
        send(('msg2', (M, A, self, encAS, encrypt((nB, M, A, self), key = kBS))), to = S)
        await(some(received(('msg3', (_M, encSA, encSB)), from_ = _S),
                   has = some((_nB, kAB) in [decrypt(encSB, key = kBS)])))
        send(('msg4', (M, encSA)), to = A)
        output('B - Key Exchange Complete')

def main():
    kAS = keygen('shared')
    kBS = keygen('shared')
    S = new(RoleS, (kAS, kBS))
    B = new(RoleB, (S, kBS))
    A = new(RoleA, (S, kAS, B))
    start(S)
    start(B)
    start(A)
