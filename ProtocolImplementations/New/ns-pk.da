"""
Needham-Schroeder Public Key Mutual Authentication Protocol
Written by Christopher Kane

Original Source:
Roger Needham and Michael Schroeder, "Using Encryption for Authentication in 
Large Networks of Computers", Communications of the ACM, v.21.12. Dec., 1978.
pp. 993-999.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.ens-cachan.fr/Software/spore/nspk.html

Protocol Diagram:
  (1) A -> S : (A, B)
  (2) S -> A : sign((B, pkB), skS)
  (3) A -> B : enc((Na, A), pkB)
  (4) B -> S : (B, A)
  (5) S -> B : sign((A, pkA), skS)
  (6) B -> A : enc((Na, Nb), pkA)
  (7) A -> B : enc(Nb, pkB)

did fix for (6):
  (6) B -> A : enc((Na, Nb, B), pkA)
"""

from sa.secalgo import *

class roleS (process):
    def setup(skS, client_keys):
        at_fork()

    def run():
        await(False)
        
    def receive(msg=('msg1', (I, R)), from_ = I):
        pkR = [x for (p, x) in client_keys if p == R].pop()
        send(('msg2', sign((R, pkR), skS)), to = I)

    def receive(msg=('msg4', (R, I)), from_ = IR):
        pkI = [x for (p, x) in client_keys if p == I].pop()
        send(('msg5', sign((I, pkI), skS)), to = R)

class roleI (process):
    def setup(skI, S, pkS, R):
        at_fork()
    
    def run():
        send(('msg1', (self, R)), to = S)
        await(some(received(('msg2', sig_S), from_ = _S),
                   has = some((_R, pkR) in [verify(sig_S, key = pkS)])))
        nI = nonce()
        send(('msg3', encrypt((nI, self), key = pkR)), to = R)
        await(some(received(('msg6', enc_RI), from_ = _R),
                   has = some((_nI, nR, _R) in [decrypt(enc_RI, key = skI)])))
        send(('msg7', encrypt(nR, key = pkR)), to = R)
        output('I authenticated R')

class roleR (process):
    def setup(skR, S, pkS):
        at_fork()

    def run():
        await(False)

    def receive(msg=('msg3', enc_IR), from_ = I):
        if some((nI, _I) in [decrypt(enc_IR, key = skR)]):
            send(('msg4', (self, I)), to = S)
            await(some(received(('msg5', sig_S), from_ = _S),
                       has = some((_I, pkI) in [verify(sig_S, key = pkS)])))
        nR = nonce()
        send(('msg6', encrypt((nI, nR, self), key = pkI)), to = I)
        await(some(received(('msg7', enc_IR2), from_ = _I),
                   has = (decrypt(enc_IR2, key = skR) == nR)))
        output('R authenticated I')

def main():
    skS, pkS = keygen('public')
    skI, pkI = keygen('public')
    skR, pkR = keygen('public')
    I = new(roleI)
    R = new(roleR)
    S = new(roleS)
    setup(S, (skS, [(I, pkI), (R, pkR)]))
    setup(I, (skI, S, pkS, R))
    setup(R, (skR, S, pkS))
    start(S)
    start(R)
    start(I)
