"""
Encrypted Key Exchange: Password-Based Protocols Secure Against Dictionary
Attacks, Bellovin and Merritt (1992)

1. I -> R : I, enc(PK_I, K_PW)
2. R -> I : enc(enc(K_IR, PK_I), K_PW)
3. I -> R : enc(C_I, K_IR)
4. R -> I : enc((C_I, C_R), K_IR)
5. I -> R : enc(C_R, K_IR)
"""

from sa.sec_algo_pycrypto import genkey, encrypt, decrypt, gen_nonce

class RoleI (process):
    def setup(R, K_PW):
        self.I = self
        self.K_IR = None
        self.SK_I = None
        
    def run():
        SK_I, PK_I = genkey('public')
        send(('msg1', I, encrypt(PK_I, key = K_PW)), to = R)
        await(some(received(((K), _R), from_ = self)))
        K_IR = K
        C_I = gen_nonce()
        send(('encK_IR', encrypt(C_I, key = K_IR)), to = R)
        await(some(received(((_C_I, C_R), _R), from_ = self)))
        send(('encK_IR', encrypt(C_R, key = K_IR)), to = R)
        output('I - Key Exchange Complete')

    def receive(msg=('msg2', m), from_ = R):
        temp = decrypt(m, key = K_PW)
        send((decrypt(temp, key = SK_I), R), to = self)

    def receive(msg=('encK_IR', m), from_ = R):
        send((decrypt(m, key = K_IR), R), to = self)

class RoleR (process):
    def setup(K_PW):
        self.R = self
        self.K_IR = None

    def run():
        await(False)

    def receive(msg=('msg1', I, m), from_ = I):
        PK_I = decrypt(m, key = K_PW)
        K_IR = genkey('shared')
        send(('msg2', encrypt(encrypt(K_IR, key = PK_I), key = K_PW)),
             to = I)
        await(some(received(((C_I), _I), from_ = self)))
        C_R = gen_nonce()
        send(('encK_IR', encrypt(C_I, C_R, key = K_IR)), to = I)
        await(some(received(((_C_R), _I), from_ = self)))
        output('R - Key Exchange Complete')

    def receive(msg=('encK_IR', m), from_ = I):
        send((decrypt(m, key = K_IR), I), to = self)

def main():
    K_PW = genkey('shared')
    R = new(RoleR, (K_PW,))
    I = new(RoleI, (R, K_PW))
    start(R)
    start(I)
