import sys
import random
from sa.sec_algo_pycrypto import encrypt, decrypt, sign, verify, genkey

def needed():
    if random.random() < 0.25:
        return True
    else:
        return False

class pk_server (process):
    def setup():
        self.pk = dict()

    def run():
        output('pks started')
        await(False)

    def receive(msg=('set_pk', p, k, cid), from_ = client):
        pk[p] = k
        send(('re_set_pk', cid), to = client)

    def receive(msg=('get_pk', p, cid), from_ = client):
        await(p in self.pk.keys())
        send(('re_get_pk', self.pk[p], cid), to = client)

class DS (process):
    def setup(s, pk_p):
        self.skI, self.pkI = genkey('public')
        self.counter = 0
        
    def run():
        output('started')
        set_pk(self.id, self.pkA)
        if needed():
            r = random.choice(tuple(s))
            s = ds(r)
            output(s)
        await(False)

    def gen_cid():
        self.counter += 1
        return (self.id, self.counter)

    def set_pk(p, k):
        cid = self.gen_cid()
        send(('set_pk', p, k, cid), to = self.pk_p)
        #await(some(received(('re_set_pk', _cid))))
        await(some(received(('re_set_pk', _cid), from_ = self.pk_p)))

    def get_pk(p):
        cid = self.gen_cid()
        send(('get_pk', p, cid), to = self.pk_p)
        #await(some(received(('re_get_pk', k, _cid))))
        await(some(received(('re_get_pk', k, _cid), from_ = self.pk_p)))
        return k

    def ds(r):
        output('DS Initiated from', self.id, 'to', r)
        k = genkey('shared')
        pkR = get_pk(r)
        send(('ds-key', encrypt(sign(k, skI), key = pkR)), to = r)
        await(some(received(('msg', m), from_= r)))
        return decrypt(m, key = k)
        
    def receive(msg=('ds-key', m), from_ = i):
        output('Retrieving Key for:', i)
        pkI = get_pk(i)
        k = verify(decrypt(m, key = skA), pkI)
        if k is not None:
            s = 'secret'
            send(('msg', encrypt(s, key = k)), to = i)
        else:
            output('VERIFICATION FAILED for DS from:', i, 'to:', self.id)

def main():
    n = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    pk_p = new(pk_server)
    setup(pk_p, ())
    ps = new(DS, num = n)
    for p in ps:
        setup(p, ((ps - {p}), pk_p))
    start(pk_p)
    start(ps)
            
