# -*- generated by 1.0.12 -*-
import da
PatternExpr_188 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.FreePattern('i'), da.pat.TuplePattern([da.pat.FreePattern('encAS'), da.pat.FreePattern('encBS')])])
PatternExpr_200 = da.pat.FreePattern('B')
PatternExpr_313 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.BoundPattern('_BoundPattern316_'), da.pat.TuplePattern([da.pat.BoundPattern('_BoundPattern317_'), da.pat.FreePattern('nB')])])
PatternExpr_323 = da.pat.BoundPattern('_BoundPattern324_')
PatternExpr_360 = da.pat.TuplePattern([da.pat.ConstantPattern('msg6'), da.pat.BoundPattern('_BoundPattern363_'), da.pat.TuplePattern([da.pat.FreePattern('encSA'), da.pat.FreePattern('encBA')])])
PatternExpr_371 = da.pat.BoundPattern('_BoundPattern372_')
PatternExpr_464 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('i'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('nA')])])
PatternExpr_476 = da.pat.BoundPattern('_BoundPattern477_')
PatternExpr_496 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.BoundPattern('_BoundPattern499_'), da.pat.FreePattern('encAS')])
PatternExpr_504 = da.pat.BoundPattern('_BoundPattern505_')
PatternExpr_541 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.BoundPattern('_BoundPattern544_'), da.pat.TuplePattern([da.pat.FreePattern('encSA'), da.pat.FreePattern('encSB')])])
PatternExpr_552 = da.pat.BoundPattern('_BoundPattern553_')
PatternExpr_603 = da.pat.TuplePattern([da.pat.ConstantPattern('msg7'), da.pat.BoundPattern('_BoundPattern606_'), da.pat.FreePattern('encAB')])
PatternExpr_611 = da.pat.BoundPattern('_BoundPattern612_')
_config_object = {}
from sa.secalgoB import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_188, sources=[PatternExpr_200], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_187])])

    def setup(self, kAS, kBS, **rest_689):
        super().setup(kAS=kAS, kBS=kBS, **rest_689)
        self._state.kAS = kAS
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    @dec_proto_run_timer
    def run(self):
        self._state.terminate = False
        super()._label('_st_label_183', block=False)
        _st_label_183 = 0
        while (_st_label_183 == 0):
            _st_label_183 += 1
            if self._state.terminate:
                _st_label_183 += 1
            else:
                super()._label('_st_label_183', block=True)
                _st_label_183 -= 1

    def _RoleS_handler_187(self, i, encAS, encBS, B):
        A = nB = nA = None

        def ExistentialOpExpr_204():
            nonlocal A, nB, nA
            for (A, _BoundPattern209_, nA, nB) in [decrypt(encAS, key=self._state.kAS)]:
                if (_BoundPattern209_ == B):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_204():

            def ExistentialOpExpr_223():
                for (_BoundPattern226_, _BoundPattern227_, _BoundPattern228_, _BoundPattern229_) in [decrypt(encBS, key=self._state.kBS)]:
                    if (_BoundPattern226_ == A):
                        if (_BoundPattern227_ == B):
                            if (_BoundPattern228_ == nA):
                                if (_BoundPattern229_ == nB):
                                    if True:
                                        return True
                return False
            if ExistentialOpExpr_223():
                kAB = keygen('shared')
                self.send(('msg5', i, (encrypt((B, nA, nB, kAB), key=self._state.kAS), encrypt((A, nA, nB, kAB), key=self._state.kBS))), to=B)
        self._state.terminate = True
    _RoleS_handler_187._labels = None
    _RoleS_handler_187._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_313, sources=[PatternExpr_323], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_360, sources=[PatternExpr_371], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_689):
        super().setup(S=S, kAS=kAS, B=B, **rest_689)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        at_fork()
        self._state.i = 1

    @dec_proto_run_timer
    def run(self):
        nA = nonce()
        self.send(('msg1', self._state.i, (self._id, nA)), to=self._state.B)
        super()._label('_st_label_310', block=False)
        nB = None

        def ExistentialOpExpr_311():
            nonlocal nB
            for (_, (_, _, _BoundPattern331_), (_ConstantPattern333_, _BoundPattern335_, (_BoundPattern337_, nB))) in self._RoleAReceivedEvent_0:
                if (_BoundPattern331_ == self._state.B):
                    if (_ConstantPattern333_ == 'msg2'):
                        if (_BoundPattern335_ == self._state.i):
                            if (_BoundPattern337_ == self._state.B):
                                if True:
                                    return True
            return False
        _st_label_310 = 0
        while (_st_label_310 == 0):
            _st_label_310 += 1
            if ExistentialOpExpr_311():
                _st_label_310 += 1
            else:
                super()._label('_st_label_310', block=True)
                _st_label_310 -= 1
        self.send(('msg3', self._state.i, encrypt((self._id, self._state.B, nA, nB), key=self._state.kAS)), to=self._state.B)
        super()._label('_st_label_357', block=False)
        encBA = encSA = kAB = None

        def ExistentialOpExpr_358():
            nonlocal encBA, encSA, kAB
            for (_, (_, _, _BoundPattern379_), (_ConstantPattern381_, _BoundPattern383_, (encSA, encBA))) in self._RoleAReceivedEvent_1:
                if (_BoundPattern379_ == self._state.B):
                    if (_ConstantPattern381_ == 'msg6'):
                        if (_BoundPattern383_ == self._state.i):

                            def ExistentialOpExpr_389(encSA):
                                nonlocal kAB
                                for (_BoundPattern392_, _BoundPattern393_, _BoundPattern394_, kAB) in [decrypt(encSA, key=self._state.kAS)]:
                                    if (_BoundPattern392_ == self._state.B):
                                        if (_BoundPattern393_ == nA):
                                            if (_BoundPattern394_ == nB):
                                                if True:
                                                    return True
                                return False

                            def ExistentialOpExpr_405(encBA):
                                for (_BoundPattern408_, _BoundPattern409_) in [decrypt(encBA, key=kAB)]:
                                    if (_BoundPattern408_ == nA):
                                        if (_BoundPattern409_ == nB):
                                            if True:
                                                return True
                                return False
                            if (ExistentialOpExpr_389(encSA=encSA) and ExistentialOpExpr_405(encBA=encBA)):
                                return True
            return False
        _st_label_357 = 0
        while (_st_label_357 == 0):
            _st_label_357 += 1
            if ExistentialOpExpr_358():
                _st_label_357 += 1
            else:
                super()._label('_st_label_357', block=True)
                _st_label_357 -= 1
        self.send(('msg7', self._state.i, encrypt(nB, key=kAB)), to=self._state.B)
        self.output('A - Key Exchange Complete')
        self._state.i += 1

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._RoleBReceivedEvent_2 = []
        self._RoleBReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_464, sources=[PatternExpr_476], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_463]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_496, sources=[PatternExpr_504], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_2', PatternExpr_541, sources=[PatternExpr_552], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_3', PatternExpr_603, sources=[PatternExpr_611], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_689):
        super().setup(S=S, kBS=kBS, **rest_689)
        self._state.S = S
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    @dec_proto_run_timer
    def run(self):
        self._state.terminate = False
        super()._label('_st_label_459', block=False)
        _st_label_459 = 0
        while (_st_label_459 == 0):
            _st_label_459 += 1
            if self._state.terminate:
                _st_label_459 += 1
            else:
                super()._label('_st_label_459', block=True)
                _st_label_459 -= 1

    def _RoleB_handler_463(self, i, A, nA):
        nB = nonce()
        self.send(('msg2', i, (self._id, nB)), to=A)
        super()._label('_st_label_493', block=False)
        encAS = None

        def ExistentialOpExpr_494():
            nonlocal encAS
            for (_, (_, _, _BoundPattern512_), (_ConstantPattern514_, _BoundPattern516_, encAS)) in self._RoleBReceivedEvent_1:
                if (_BoundPattern512_ == A):
                    if (_ConstantPattern514_ == 'msg3'):
                        if (_BoundPattern516_ == i):
                            if True:
                                return True
            return False
        _st_label_493 = 0
        while (_st_label_493 == 0):
            _st_label_493 += 1
            if ExistentialOpExpr_494():
                _st_label_493 += 1
            else:
                super()._label('_st_label_493', block=True)
                _st_label_493 -= 1
        self.send(('msg4', i, (encAS, encrypt((A, self._id, nA, nB), key=self._state.kBS))), to=self._state.S)
        super()._label('_st_label_538', block=False)
        kAB = encSB = encSA = None

        def ExistentialOpExpr_539():
            nonlocal kAB, encSB, encSA
            for (_, (_, _, _BoundPattern560_), (_ConstantPattern562_, _BoundPattern564_, (encSA, encSB))) in self._RoleBReceivedEvent_2:
                if (_BoundPattern560_ == self._state.S):
                    if (_ConstantPattern562_ == 'msg5'):
                        if (_BoundPattern564_ == i):

                            def ExistentialOpExpr_569(encSB):
                                nonlocal kAB
                                for (_BoundPattern572_, _BoundPattern573_, _BoundPattern574_, kAB) in [decrypt(encSB, key=self._state.kBS)]:
                                    if (_BoundPattern572_ == A):
                                        if (_BoundPattern573_ == nA):
                                            if (_BoundPattern574_ == nB):
                                                if True:
                                                    return True
                                return False
                            if ExistentialOpExpr_569(encSB=encSB):
                                return True
            return False
        _st_label_538 = 0
        while (_st_label_538 == 0):
            _st_label_538 += 1
            if ExistentialOpExpr_539():
                _st_label_538 += 1
            else:
                super()._label('_st_label_538', block=True)
                _st_label_538 -= 1
        self.send(('msg6', i, (encSA, encrypt((nA, nB), key=kAB))), to=A)
        super()._label('_st_label_600', block=False)
        encAB = None

        def ExistentialOpExpr_601():
            nonlocal encAB
            for (_, (_, _, _BoundPattern619_), (_ConstantPattern621_, _BoundPattern623_, encAB)) in self._RoleBReceivedEvent_3:
                if (_BoundPattern619_ == A):
                    if (_ConstantPattern621_ == 'msg7'):
                        if (_BoundPattern623_ == i):
                            if (decrypt(encAB, key=kAB) == nB):
                                return True
            return False
        _st_label_600 = 0
        while (_st_label_600 == 0):
            _st_label_600 += 1
            if ExistentialOpExpr_601():
                _st_label_600 += 1
            else:
                super()._label('_st_label_600', block=True)
                _st_label_600 -= 1
        self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_463._labels = None
    _RoleB_handler_463._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
