# -*- generated by 1.0.12 -*-
import da
PatternExpr_183 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.TuplePattern([da.pat.FreePattern('M'), da.pat.FreePattern('A'), da.pat.FreePattern('B'), da.pat.FreePattern('encAS'), da.pat.FreePattern('encBS')])])
PatternExpr_199 = da.pat.FreePattern('B')
PatternExpr_312 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.TuplePattern([da.pat.BoundPattern('_BoundPattern315_'), da.pat.FreePattern('encSA')])])
PatternExpr_321 = da.pat.BoundPattern('_BoundPattern322_')
PatternExpr_380 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.TuplePattern([da.pat.FreePattern('M'), da.pat.FreePattern('A'), da.pat.SelfPattern(), da.pat.FreePattern('encAS')])])
PatternExpr_394 = da.pat.FreePattern('A')
PatternExpr_424 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.TuplePattern([da.pat.BoundPattern('_BoundPattern427_'), da.pat.FreePattern('encSA'), da.pat.FreePattern('encSB')])])
PatternExpr_435 = da.pat.BoundPattern('_BoundPattern436_')
_config_object = {}
from sa.secalgoB import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_183, sources=[PatternExpr_199], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_182])])

    def setup(self, kAS, kBS, **rest_531):
        super().setup(kAS=kAS, kBS=kBS, **rest_531)
        self._state.kAS = kAS
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_178', block=False)
        _st_label_178 = 0
        while (_st_label_178 == 0):
            _st_label_178 += 1
            if self._state.terminate:
                _st_label_178 += 1
            else:
                super()._label('_st_label_178', block=True)
                _st_label_178 -= 1

    def _RoleS_handler_182(self, M, A, B, encAS, encBS):
        nA = None

        def ExistentialOpExpr_202():
            nonlocal nA
            for (nA, _BoundPattern207_, _BoundPattern208_, _BoundPattern209_) in [decrypt(encAS, key=self._state.kAS)]:
                if (_BoundPattern207_ == M):
                    if (_BoundPattern208_ == A):
                        if (_BoundPattern209_ == B):
                            if True:
                                return True
            return False
        if ExistentialOpExpr_202():
            nB = None

            def ExistentialOpExpr_219():
                nonlocal nB
                for (nB, _BoundPattern224_, _BoundPattern225_, _BoundPattern226_) in [decrypt(encBS, key=self._state.kBS)]:
                    if (_BoundPattern224_ == M):
                        if (_BoundPattern225_ == A):
                            if (_BoundPattern226_ == B):
                                if True:
                                    return True
                return False
            if ExistentialOpExpr_219():
                kAB = keygen('shared')
                self.send(('msg3', (M, encrypt((nA, kAB), key=self._state.kAS), encrypt((nB, kAB), key=self._state.kBS))), to=B)
        self._state.terminate = True
    _RoleS_handler_182._labels = None
    _RoleS_handler_182._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_312, sources=[PatternExpr_321], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_531):
        super().setup(S=S, kAS=kAS, B=B, **rest_531)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        at_fork()

    def run(self):
        M = nonce()
        nA = nonce()
        self.send(('msg1', (M, self._id, self._state.B, encrypt((nA, M, self._id, self._state.B), key=self._state.kAS))), to=self._state.B)
        super()._label('_st_label_309', block=False)
        encSA = kAB = None

        def ExistentialOpExpr_310():
            nonlocal encSA, kAB
            for (_, (_, _, _BoundPattern329_), (_ConstantPattern331_, (_BoundPattern334_, encSA))) in self._RoleAReceivedEvent_0:
                if (_BoundPattern329_ == self._state.B):
                    if (_ConstantPattern331_ == 'msg4'):
                        if (_BoundPattern334_ == M):

                            def ExistentialOpExpr_337(encSA):
                                nonlocal kAB
                                for (_BoundPattern340_, kAB) in [decrypt(encSA, key=self._state.kAS)]:
                                    if (_BoundPattern340_ == nA):
                                        if True:
                                            return True
                                return False
                            if ExistentialOpExpr_337(encSA=encSA):
                                return True
            return False
        _st_label_309 = 0
        while (_st_label_309 == 0):
            _st_label_309 += 1
            if ExistentialOpExpr_310():
                _st_label_309 += 1
            else:
                super()._label('_st_label_309', block=True)
                _st_label_309 -= 1
        self.output('A - Key Exchange Complete')

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_380, sources=[PatternExpr_394], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_379]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_424, sources=[PatternExpr_435], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_531):
        super().setup(S=S, kBS=kBS, **rest_531)
        self._state.S = S
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_375', block=False)
        _st_label_375 = 0
        while (_st_label_375 == 0):
            _st_label_375 += 1
            if self._state.terminate:
                _st_label_375 += 1
            else:
                super()._label('_st_label_375', block=True)
                _st_label_375 -= 1

    def _RoleB_handler_379(self, M, A, encAS):
        nB = nonce()
        self.send(('msg2', (M, A, self._id, encAS, encrypt((nB, M, A, self._id), key=self._state.kBS))), to=self._state.S)
        super()._label('_st_label_421', block=False)
        encSA = kAB = encSB = None

        def ExistentialOpExpr_422():
            nonlocal encSA, kAB, encSB
            for (_, (_, _, _BoundPattern443_), (_ConstantPattern445_, (_BoundPattern448_, encSA, encSB))) in self._RoleBReceivedEvent_1:
                if (_BoundPattern443_ == self._state.S):
                    if (_ConstantPattern445_ == 'msg3'):
                        if (_BoundPattern448_ == M):

                            def ExistentialOpExpr_452(encSB):
                                nonlocal kAB
                                for (_BoundPattern455_, kAB) in [decrypt(encSB, key=self._state.kBS)]:
                                    if (_BoundPattern455_ == nB):
                                        if True:
                                            return True
                                return False
                            if ExistentialOpExpr_452(encSB=encSB):
                                return True
            return False
        _st_label_421 = 0
        while (_st_label_421 == 0):
            _st_label_421 += 1
            if ExistentialOpExpr_422():
                _st_label_421 += 1
            else:
                super()._label('_st_label_421', block=True)
                _st_label_421 -= 1
        self.send(('msg4', (M, encSA)), to=A)
        self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_379._labels = None
    _RoleB_handler_379._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
