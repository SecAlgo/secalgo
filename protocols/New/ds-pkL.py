# -*- generated by 1.0.12 -*-
import da
PatternExpr_195 = da.pat.TuplePattern([da.pat.ConstantPattern('msg02'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.BoundPattern('_BoundPattern200_'), da.pat.FreePattern('tA'), da.pat.FreePattern('sigA')]), da.pat.TuplePattern([da.pat.BoundPattern('_BoundPattern206_'), da.pat.FreePattern('pkB'), da.pat.FreePattern('tB'), da.pat.FreePattern('sigB')])])
PatternExpr_216 = da.pat.BoundPattern('_BoundPattern217_')
PatternExpr_339 = da.pat.TuplePattern([da.pat.ConstantPattern('msg03'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('pkA'), da.pat.FreePattern('tA'), da.pat.FreePattern('sigA')]), da.pat.TuplePattern([da.pat.FreePattern('B'), da.pat.BoundPattern('_BoundPattern353_'), da.pat.FreePattern('tB'), da.pat.FreePattern('sigB')]), da.pat.FreePattern('encKey')])
PatternExpr_363 = da.pat.FreePattern('A')
PatternExpr_448 = da.pat.TuplePattern([da.pat.ConstantPattern('msg01'), da.pat.FreePattern('A'), da.pat.FreePattern('B')])
PatternExpr_457 = da.pat.BoundPattern('_BoundPattern458_')
_config_object = {}
import sys, time
from sa.secalgoB import *
configure(verify_returns='bool')

class roleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._roleAReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_roleAReceivedEvent_0', PatternExpr_195, sources=[PatternExpr_216], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, B, S, skA, pkA, pkS, **rest_614):
        super().setup(B=B, S=S, skA=skA, pkA=pkA, pkS=pkS, **rest_614)
        self._state.B = B
        self._state.S = S
        self._state.skA = skA
        self._state.pkA = pkA
        self._state.pkS = pkS
        at_fork()

    def run(self):
        self.send(('msg01', self._id, self._state.B), to=self._state.S)
        super()._label('_st_label_192', block=False)
        tB = tA = sigB = pkB = A = sigA = None

        def ExistentialOpExpr_193():
            nonlocal tB, tA, sigB, pkB, A, sigA
            for (_, (_, _, _BoundPattern224_), (_ConstantPattern226_, (A, _BoundPattern230_, tA, sigA), (_BoundPattern234_, pkB, tB, sigB))) in self._roleAReceivedEvent_0:
                if (_BoundPattern224_ == self._state.S):
                    if (_ConstantPattern226_ == 'msg02'):
                        if (_BoundPattern230_ == self._state.pkA):
                            if (_BoundPattern234_ == self._state.B):
                                if (A == self._id):
                                    return True
            return False
        _st_label_192 = 0
        while (_st_label_192 == 0):
            _st_label_192 += 1
            if ExistentialOpExpr_193():
                _st_label_192 += 1
            else:
                super()._label('_st_label_192', block=True)
                _st_label_192 -= 1
        if (verify(((A, self._state.pkA, tA), sigA), key=self._state.pkS) and verify(((self._state.B, pkB, tB), sigB), key=self._state.pkS)):
            kAB = keygen('shared')
            tAB = time.time()
            self.send(('msg03', (A, self._state.pkA, tA, sigA), (self._state.B, pkB, tB, sigB), encrypt(((kAB, tAB), sign((kAB, tAB), key=self._state.skA)), key=pkB)), to=self._state.B)
            self.output('Initiator: Key Exchange Complete')
        else:
            self.output('Initiator: Could not verify certificates')

class roleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_roleBReceivedEvent_0', PatternExpr_339, sources=[PatternExpr_363], destinations=None, timestamps=None, record_history=None, handlers=[self._roleB_handler_338])])

    def setup(self, S, skB, pkB, pkS, **rest_614):
        super().setup(S=S, skB=skB, pkB=pkB, pkS=pkS, **rest_614)
        self._state.S = S
        self._state.skB = skB
        self._state.pkB = pkB
        self._state.pkS = pkS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_334', block=False)
        _st_label_334 = 0
        while (_st_label_334 == 0):
            _st_label_334 += 1
            if self._state.terminate:
                _st_label_334 += 1
            else:
                super()._label('_st_label_334', block=True)
                _st_label_334 -= 1

    def _roleB_handler_338(self, A, pkA, tA, sigA, B, tB, sigB, encKey):
        if (verify(((A, pkA, tA), sigA), key=self._state.pkS) and verify(((B, self._state.pkB, tB), sigB), key=self._state.pkS) and (B == self._id)):
            ((kAB, tAB), sigAB) = decrypt(encKey, key=self._state.skB)
            if verify(((kAB, tAB), sigAB), key=pkA):
                self.output('Recipient: Key Exchange Complete')
            else:
                self.output('Recipient: Could not verify signature on shared key')
        else:
            self.output('Recipient: Could not verify certificates')
        self._state.terminate = True
    _roleB_handler_338._labels = None
    _roleB_handler_338._notlabels = None

class roleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_roleSReceivedEvent_0', PatternExpr_448, sources=[PatternExpr_457], destinations=None, timestamps=None, record_history=None, handlers=[self._roleS_handler_447])])

    def setup(self, skS, pkS, client_keys, **rest_614):
        super().setup(skS=skS, pkS=pkS, client_keys=client_keys, **rest_614)
        self._state.skS = skS
        self._state.pkS = pkS
        self._state.client_keys = client_keys
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_443', block=False)
        _st_label_443 = 0
        while (_st_label_443 == 0):
            _st_label_443 += 1
            if self._state.terminate:
                _st_label_443 += 1
            else:
                super()._label('_st_label_443', block=True)
                _st_label_443 -= 1

    def _roleS_handler_447(self, A, B):
        pkA = [x for (p, x) in self._state.client_keys if (p == A)].pop()
        pkB = [x for (p, x) in self._state.client_keys if (p == B)].pop()
        tA = tB = time.time()
        self.send(('msg02', (A, pkA, tA, sign((A, pkA, tA), key=self._state.skS)), (B, pkB, tB, sign((B, pkB, tB), key=self._state.skS))), to=A)
        self.output('Server: Certificates Sent')
        self._state.terminate = True
    _roleS_handler_447._labels = None
    _roleS_handler_447._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        (skS, pkS) = keygen('public')
        (skA, pkA) = keygen('public')
        (skB, pkB) = keygen('public')
        S = self.new(roleS)
        B = self.new(roleB, (S, skB, pkB, pkS))
        A = self.new(roleA, (B, S, skA, pkA, pkS))
        self._setup(S, (skS, pkS, [(A, pkA), (B, pkB)]))
        self._start(S)
        self._start(B)
        self._start(A)
