"""
Needham-Schroeder Public Key Mutual Authentication Protocol
Written by Christopher Kane

Original Source:
Roger Needham and Michael Schroeder, "Using Encryption for Authentication in 
Large Networks of Computers", Communications of the ACM, v.21.12. Dec., 1978.
pp. 993-999.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.ens-cachan.fr/Software/spore/nspk.html

Protocol Diagram:
  (1) A -> S : (A, B)
  (2) S -> A : sign((B, pkB), skS)
  (3) A -> B : enc((Na, A), pkB)
  (4) B -> S : (B, A)
  (5) S -> B : sign((A, pkA), skS)
  (6) B -> A : enc((Na, Nb), pkA)
  (7) A -> B : enc(Nb, pkB)

did fix for (6):
  (6) B -> A : enc((Na, Nb, B), pkA)
"""
from sa.secalgo import *

class roleS (process):
    def setup():
        pass

    def run():
        if await(False):
            pass
        
    def receive(msg=('1', _), from_ = I):
        send(('2', sign((R, pk(R)), key = sk(self))), to = I)

    def receive(msg=('4', _), from_ = R):
        send(('5', sign((I, pk(I)), key = sk(self))), to = R)

class roleI (process):
    def setup(S, R):
        pass

    def run():
        send(('1', (self, R)), to = S)
        await(some(received(('2', _), from_ = _S)))
        nI = nonce()
        send(('3', encrypt((nI, self), key = pk(R))), to = R)
        await(some(received(('6', _), from_ = R)))
        send(('7', encrypt(nR, key = pk(R))), to = R)
        output('I authenticated R')

class roleR (process):
    def setup(S):
        pass

    def run():
        if await(False):
            pass
            
    def receive(msg=('3', _), from_ = I):
        send(('4', (self, I)), to = S)
        await(some(received(('5', _), from_ = S)))
        nR = nonce()
        send(('6', encrypt((nI, nR, R), key = pk(I))), to = I)
        await(some(received(('7', _), from_ = _I)))
        output('R authenticated I')

def main():
    I = new(roleI)
    R = new(roleR)
    S = new(roleS)
    setup(S, ())
    setup(I, (S, R))
    setup(R, (S, ))
    start(S)
    start(R)
    start(I)
