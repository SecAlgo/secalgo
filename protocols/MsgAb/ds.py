# -*- generated by 1.0.9 -*-
import da
PatternExpr_198 = da.pat.TuplePattern([da.pat.ConstantPattern('2'), da.pat.FreePattern('m')])
PatternExpr_205 = da.pat.BoundPattern('_BoundPattern206_')
PatternExpr_253 = da.pat.TuplePattern([da.pat.ConstantPattern('1'), da.pat.FreePattern('m')])
PatternExpr_260 = da.pat.FreePattern('I')
_config_object = {}
from sa.secalgo import *

class RoleI(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleIReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_0', PatternExpr_198, sources=[PatternExpr_205], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, R, **rest_357):
        super().setup(R=R, **rest_357)
        self._state.R = R
        pass

    def run(self):
        K_IR = keygen('shared')
        self.send(('1', (encrypt(sign(K_IR, key=sk(self._id)), key=pk(self._state.R)),)), to=self._state.R)
        super()._label('_st_label_195', block=False)
        m = None

        def ExistentialOpExpr_196():
            nonlocal m
            for (_, (_, _, _BoundPattern213_), (_ConstantPattern215_, m)) in self._RoleIReceivedEvent_0:
                if (_BoundPattern213_ == self._state.R):
                    if (_ConstantPattern215_ == '2'):
                        if True:
                            return True
            return False
        _st_label_195 = 0
        while (_st_label_195 == 0):
            _st_label_195 += 1
            if ExistentialOpExpr_196():
                _st_label_195 += 1
            else:
                super()._label('_st_label_195', block=True)
                _st_label_195 -= 1
        self.output('DECRYPTED MESSAGE:', decrypt(m[0], key=K_IR))

class RoleR(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_0', PatternExpr_253, sources=[PatternExpr_260], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleR_handler_252])])

    def setup(self, **rest_357):
        super().setup(**rest_357)
        self._state.s = 'secret'

    def run(self):
        super()._label('_st_label_245', block=False)
        _st_label_245 = 0
        self._timer_start()
        while (_st_label_245 == 0):
            _st_label_245 += 1
            if False:
                pass
                _st_label_245 += 1
            elif self._timer_expired:
                pass
                _st_label_245 += 1
            else:
                super()._label('_st_label_245', block=True, timeout=10)
                _st_label_245 -= 1

    def _RoleR_handler_252(self, m, I):
        self.send(('2', (encrypt(self._state.s, key=verify(decrypt(m[0], key=sk(self._id)), key=pk(I))),)), to=I)
    _RoleR_handler_252._labels = None
    _RoleR_handler_252._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        (skI, pkI) = keygen('public')
        (skR, pkR) = keygen('public')
        R = self.new(RoleR, ())
        I = self.new(RoleI, (R,))
        register_key('private', I, skI)
        register_key('private', R, skR)
        register_key('public', I, pkI)
        register_key('public', R, pkR)
        self._start(I)
        self._start(R)
