# -*- generated by 1.0.12 -*-
import da
PatternExpr_183 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('B'), da.pat.FreePattern('nA')])])
PatternExpr_195 = da.pat.FreePattern('A')
PatternExpr_260 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.FreePattern('encAS')])
PatternExpr_267 = da.pat.BoundPattern('_BoundPattern268_')
PatternExpr_308 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.FreePattern('encBA')])
PatternExpr_315 = da.pat.BoundPattern('_BoundPattern316_')
PatternExpr_378 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.FreePattern('encBS')])
PatternExpr_385 = da.pat.FreePattern('A')
PatternExpr_422 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.FreePattern('encAB')])
PatternExpr_429 = da.pat.BoundPattern('_BoundPattern430_')
_config_object = {}
from sa.secalgoB import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_183, sources=[PatternExpr_195], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_182])])

    def setup(self, kAS, kBS, **rest_508):
        super().setup(kAS=kAS, kBS=kBS, **rest_508)
        self._state.kAS = kAS
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_178', block=False)
        _st_label_178 = 0
        while (_st_label_178 == 0):
            _st_label_178 += 1
            if self._state.terminate:
                _st_label_178 += 1
            else:
                super()._label('_st_label_178', block=True)
                _st_label_178 -= 1

    def _RoleS_handler_182(self, A, B, nA):
        kAB = keygen('shared')
        self.send(('msg2', encrypt((nA, kAB, B, encrypt((kAB, A), key=self._state.kBS)), key=self._state.kAS)), to=A)
        self._state.terminate = True
    _RoleS_handler_182._labels = None
    _RoleS_handler_182._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_260, sources=[PatternExpr_267], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_308, sources=[PatternExpr_315], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_508):
        super().setup(S=S, kAS=kAS, B=B, **rest_508)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        at_fork()

    def run(self):
        nA = nonce()
        self.send(('msg1', (self._id, self._state.B, nA)), to=self._state.S)
        super()._label('_st_label_257', block=False)
        encAS = encBS = kAB = None

        def ExistentialOpExpr_258():
            nonlocal encAS, encBS, kAB
            for (_, (_, _, _BoundPattern275_), (_ConstantPattern277_, encAS)) in self._RoleAReceivedEvent_0:
                if (_BoundPattern275_ == self._state.S):
                    if (_ConstantPattern277_ == 'msg2'):

                        def ExistentialOpExpr_281(encAS):
                            nonlocal kAB, encBS
                            for (_BoundPattern284_, kAB, _BoundPattern287_, encBS) in [decrypt(encAS, key=self._state.kAS)]:
                                if (_BoundPattern284_ == nA):
                                    if (_BoundPattern287_ == self._state.B):
                                        if True:
                                            return True
                            return False
                        if ExistentialOpExpr_281(encAS=encAS):
                            return True
            return False
        _st_label_257 = 0
        while (_st_label_257 == 0):
            _st_label_257 += 1
            if ExistentialOpExpr_258():
                _st_label_257 += 1
            else:
                super()._label('_st_label_257', block=True)
                _st_label_257 -= 1
        self.send(('msg3', encBS), to=self._state.B)
        super()._label('_st_label_305', block=False)
        encBA = None

        def ExistentialOpExpr_306():
            nonlocal encBA
            for (_, (_, _, _BoundPattern323_), (_ConstantPattern325_, encBA)) in self._RoleAReceivedEvent_1:
                if (_BoundPattern323_ == self._state.B):
                    if (_ConstantPattern325_ == 'msg4'):
                        if True:
                            return True
            return False
        _st_label_305 = 0
        while (_st_label_305 == 0):
            _st_label_305 += 1
            if ExistentialOpExpr_306():
                _st_label_305 += 1
            else:
                super()._label('_st_label_305', block=True)
                _st_label_305 -= 1
        nR = decrypt(encBA, key=kAB)
        self.send(('msg5', encrypt((nR - 1), key=kAB)), to=self._state.B)
        self.output('A - Key Exchange Complete')

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_378, sources=[PatternExpr_385], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_377]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_422, sources=[PatternExpr_429], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_508):
        super().setup(S=S, kBS=kBS, **rest_508)
        self._state.S = S
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_373', block=False)
        _st_label_373 = 0
        while (_st_label_373 == 0):
            _st_label_373 += 1
            if self._state.terminate:
                _st_label_373 += 1
            else:
                super()._label('_st_label_373', block=True)
                _st_label_373 -= 1

    def _RoleB_handler_377(self, encBS, A):
        kAB = None

        def ExistentialOpExpr_389():
            nonlocal kAB
            for (kAB, _BoundPattern394_) in [decrypt(encBS, key=self._state.kBS)]:
                if (_BoundPattern394_ == A):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_389():
            nB = nonce()
            self.send(('msg4', encrypt(nB, key=kAB)), to=A)
            super()._label('_st_label_419', block=False)
            encAB = None

            def ExistentialOpExpr_420():
                nonlocal encAB
                for (_, (_, _, _BoundPattern437_), (_ConstantPattern439_, encAB)) in self._RoleBReceivedEvent_1:
                    if (_BoundPattern437_ == A):
                        if (_ConstantPattern439_ == 'msg5'):
                            if ((nB - 1) == decrypt(encAB, key=kAB)):
                                return True
                return False
            _st_label_419 = 0
            while (_st_label_419 == 0):
                _st_label_419 += 1
                if ExistentialOpExpr_420():
                    _st_label_419 += 1
                else:
                    super()._label('_st_label_419', block=True)
                    _st_label_419 -= 1
            self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_377._labels = None
    _RoleB_handler_377._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
