# -*- generated by 1.0.12 -*-
import da
PatternExpr_192 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('i'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('B'), da.pat.FreePattern('nA')])])
PatternExpr_206 = da.pat.FreePattern('A')
PatternExpr_282 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.BoundPattern('_BoundPattern285_'), da.pat.FreePattern('encAS')])
PatternExpr_290 = da.pat.BoundPattern('_BoundPattern291_')
PatternExpr_333 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.BoundPattern('_BoundPattern336_'), da.pat.FreePattern('encBA')])
PatternExpr_341 = da.pat.BoundPattern('_BoundPattern342_')
PatternExpr_415 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.FreePattern('i'), da.pat.FreePattern('encBS')])
PatternExpr_424 = da.pat.FreePattern('A')
PatternExpr_462 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.BoundPattern('_BoundPattern465_'), da.pat.FreePattern('encAB')])
PatternExpr_470 = da.pat.BoundPattern('_BoundPattern471_')
_config_object = {}
import sys
from sa.secalgoB import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_192, sources=[PatternExpr_206], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_191])])

    def setup(self, kAS, kBS, loops, **rest_569):
        super().setup(kAS=kAS, kBS=kBS, loops=loops, **rest_569)
        self._state.kAS = kAS
        self._state.kBS = kBS
        self._state.loops = loops
        at_fork()
        self._state.terminate = False

    @dec_proto_run_timer
    def run(self):
        self._state.terminate = False
        super()._label('_st_label_187', block=False)
        _st_label_187 = 0
        while (_st_label_187 == 0):
            _st_label_187 += 1
            if self._state.terminate:
                _st_label_187 += 1
            else:
                super()._label('_st_label_187', block=True)
                _st_label_187 -= 1

    def _RoleS_handler_191(self, i, A, B, nA):
        kAB = keygen('shared')
        self.send(('msg2', i, encrypt((nA, kAB, B, encrypt((kAB, A), key=self._state.kBS)), key=self._state.kAS)), to=A)
        self._state.terminate = True
    _RoleS_handler_191._labels = None
    _RoleS_handler_191._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_282, sources=[PatternExpr_290], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_333, sources=[PatternExpr_341], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, loops, **rest_569):
        super().setup(S=S, kAS=kAS, B=B, loops=loops, **rest_569)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        self._state.loops = loops
        at_fork()
        self._state.i = 1

    @dec_proto_run_timer
    def run(self):
        nA = nonce()
        self.send(('msg1', self._state.i, (self._id, self._state.B, nA)), to=self._state.S)
        super()._label('_st_label_279', block=False)
        encBS = kAB = encAS = None

        def ExistentialOpExpr_280():
            nonlocal encBS, kAB, encAS
            for (_, (_, _, _BoundPattern298_), (_ConstantPattern300_, _BoundPattern302_, encAS)) in self._RoleAReceivedEvent_0:
                if (_BoundPattern298_ == self._state.S):
                    if (_ConstantPattern300_ == 'msg2'):
                        if (_BoundPattern302_ == self._state.i):

                            def ExistentialOpExpr_305(encAS):
                                nonlocal encBS, kAB
                                for (_BoundPattern308_, kAB, _BoundPattern311_, encBS) in [decrypt(encAS, key=self._state.kAS)]:
                                    if (_BoundPattern308_ == nA):
                                        if (_BoundPattern311_ == self._state.B):
                                            if True:
                                                return True
                                return False
                            if ExistentialOpExpr_305(encAS=encAS):
                                return True
            return False
        _st_label_279 = 0
        while (_st_label_279 == 0):
            _st_label_279 += 1
            if ExistentialOpExpr_280():
                _st_label_279 += 1
            else:
                super()._label('_st_label_279', block=True)
                _st_label_279 -= 1
        self.send(('msg3', self._state.i, encBS), to=self._state.B)
        super()._label('_st_label_330', block=False)
        encBA = None

        def ExistentialOpExpr_331():
            nonlocal encBA
            for (_, (_, _, _BoundPattern349_), (_ConstantPattern351_, _BoundPattern353_, encBA)) in self._RoleAReceivedEvent_1:
                if (_BoundPattern349_ == self._state.B):
                    if (_ConstantPattern351_ == 'msg4'):
                        if (_BoundPattern353_ == self._state.i):
                            if True:
                                return True
            return False
        _st_label_330 = 0
        while (_st_label_330 == 0):
            _st_label_330 += 1
            if ExistentialOpExpr_331():
                _st_label_330 += 1
            else:
                super()._label('_st_label_330', block=True)
                _st_label_330 -= 1
        nR = decrypt(encBA, key=kAB)
        self.send(('msg5', self._state.i, encrypt((nR - 1), key=kAB)), to=self._state.B)
        self.output('A - Key Exchange Complete')
        self._state.i += 1

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_415, sources=[PatternExpr_424], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_414]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_462, sources=[PatternExpr_470], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, loops, **rest_569):
        super().setup(S=S, kBS=kBS, loops=loops, **rest_569)
        self._state.S = S
        self._state.kBS = kBS
        self._state.loops = loops
        at_fork()
        self._state.terminate = False

    @dec_proto_run_timer
    def run(self):
        self._state.terminate = False
        super()._label('_st_label_410', block=False)
        _st_label_410 = 0
        while (_st_label_410 == 0):
            _st_label_410 += 1
            if self._state.terminate:
                _st_label_410 += 1
            else:
                super()._label('_st_label_410', block=True)
                _st_label_410 -= 1

    def _RoleB_handler_414(self, i, encBS, A):
        kAB = None

        def ExistentialOpExpr_428():
            nonlocal kAB
            for (kAB, _BoundPattern433_) in [decrypt(encBS, key=self._state.kBS)]:
                if (_BoundPattern433_ == A):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_428():
            nB = nonce()
            self.send(('msg4', i, encrypt(nB, key=kAB)), to=A)
            super()._label('_st_label_459', block=False)
            encAB = None

            def ExistentialOpExpr_460():
                nonlocal encAB
                for (_, (_, _, _BoundPattern478_), (_ConstantPattern480_, _BoundPattern482_, encAB)) in self._RoleBReceivedEvent_1:
                    if (_BoundPattern478_ == A):
                        if (_ConstantPattern480_ == 'msg5'):
                            if (_BoundPattern482_ == i):
                                if ((nB - 1) == decrypt(encAB, key=kAB)):
                                    return True
                return False
            _st_label_459 = 0
            while (_st_label_459 == 0):
                _st_label_459 += 1
                if ExistentialOpExpr_460():
                    _st_label_459 += 1
                else:
                    super()._label('_st_label_459', block=True)
                    _st_label_459 -= 1
            self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_414._labels = None
    _RoleB_handler_414._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        loops = (int(sys.argv[1]) if (len(sys.argv) > 1) else 1)
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS, loops))
        B = self.new(RoleB, (S, kBS, loops))
        A = self.new(RoleA, (S, kAS, B, loops))
        self._start(S)
        self._start(B)
        self._start(A)
