# -*- generated by 1.0.12 -*-
import da
PatternExpr_211 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('B'), da.pat.FreePattern('nA'), da.pat.FreePattern('encBS')])])
PatternExpr_225 = da.pat.BoundPattern('_BoundPattern226_')
PatternExpr_493 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.FreePattern('encBS')])
PatternExpr_500 = da.pat.BoundPattern('_BoundPattern501_')
PatternExpr_538 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.FreePattern('encAS')])
PatternExpr_545 = da.pat.BoundPattern('_BoundPattern546_')
PatternExpr_648 = da.pat.TuplePattern([da.pat.ConstantPattern('msg6'), da.pat.FreePattern('encBA')])
PatternExpr_655 = da.pat.BoundPattern('_BoundPattern656_')
PatternExpr_849 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('A')])
PatternExpr_856 = da.pat.BoundPattern('_BoundPattern857_')
PatternExpr_945 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.FreePattern('encSB')])
PatternExpr_952 = da.pat.BoundPattern('_BoundPattern953_')
PatternExpr_1120 = da.pat.TuplePattern([da.pat.ConstantPattern('msg7'), da.pat.FreePattern('encAB')])
PatternExpr_1127 = da.pat.BoundPattern('_BoundPattern1128_')
_config_object = {}
import pickle, time, json
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random import random
from sa.Misc.Padding import pkcs7_pad as pad, pkcs7_unpad as unpad
pickle_loops = 2000000

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_211, sources=[PatternExpr_225], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_210])])

    def setup(self, kAS, kBS, **rest_1283):
        super().setup(kAS=kAS, kBS=kBS, **rest_1283)
        self._state.kAS = kAS
        self._state.kBS = kBS
        Random.atfork()
        self._state.results = []
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_206', block=False)
        _st_label_206 = 0
        while (_st_label_206 == 0):
            _st_label_206 += 1
            if self._state.terminate:
                _st_label_206 += 1
            else:
                super()._label('_st_label_206', block=True)
                _st_label_206 -= 1

    def _RoleS_handler_210(self, A, B, nA, encBS):
        cipher = AES.new(self._state.kBS, AES.MODE_CBC, encBS[:AES.block_size])
        serial_pt = unpad(cipher.decrypt(encBS[AES.block_size:]))
        loops = pickle_loops
        start_time = time.process_time()
        for i in range(loops):
            (A2, nB1) = pickle.loads(serial_pt)
        self._state.results.append(['pickle.loads', 'sym_decrypt', start_time, time.process_time(), loops])
        if (A2 == A):
            kAB = Random.new().read(32)
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                serial_pt = pickle.dumps((kAB, nB1, A))
            self._state.results.append(['pickle.dumps', 'sym_encrypt', start_time, time.process_time(), loops])
            ivB = Random.new().read(AES.block_size)
            cipherB = AES.new(self._state.kBS, AES.MODE_CBC, ivB)
            encSB = (ivB + cipherB.encrypt(pad(serial_pt)))
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                serial_pt = pickle.dumps((nA, kAB, B, encSB))
            self._state.results.append(['pickle.dumps', 'sym_encrypt', start_time, time.process_time(), loops])
            ivA = Random.new().read(AES.block_size)
            cipherA = AES.new(self._state.kAS, AES.MODE_CBC, ivA)
            encSA = (ivA + cipherA.encrypt(pad(serial_pt)))
            self.send(('msg4', encSA), to=A)
        for result in self._state.results:
            print(json.dumps(result))
        self._state.terminate = True
    _RoleS_handler_210._labels = None
    _RoleS_handler_210._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._RoleAReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_493, sources=[PatternExpr_500], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_538, sources=[PatternExpr_545], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_2', PatternExpr_648, sources=[PatternExpr_655], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_1283):
        super().setup(S=S, kAS=kAS, B=B, **rest_1283)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        Random.atfork()
        self._state.results = []

    def run(self):
        self.send(('msg1', self._id), to=self._state.B)
        super()._label('_st_label_490', block=False)
        encBS = None

        def ExistentialOpExpr_491():
            nonlocal encBS
            for (_, (_, _, _BoundPattern508_), (_ConstantPattern510_, encBS)) in self._RoleAReceivedEvent_0:
                if (_BoundPattern508_ == self._state.B):
                    if (_ConstantPattern510_ == 'msg2'):
                        if True:
                            return True
            return False
        _st_label_490 = 0
        while (_st_label_490 == 0):
            _st_label_490 += 1
            if ExistentialOpExpr_491():
                _st_label_490 += 1
            else:
                super()._label('_st_label_490', block=True)
                _st_label_490 -= 1
        nA = random.StrongRandom().getrandbits(128)
        self.send(('msg3', (self._id, self._state.B, nA, encBS)), to=self._state.S)
        super()._label('_st_label_535', block=False)
        encAS = None

        def ExistentialOpExpr_536():
            nonlocal encAS
            for (_, (_, _, _BoundPattern553_), (_ConstantPattern555_, encAS)) in self._RoleAReceivedEvent_1:
                if (_BoundPattern553_ == self._state.S):
                    if (_ConstantPattern555_ == 'msg4'):
                        if True:
                            return True
            return False
        _st_label_535 = 0
        while (_st_label_535 == 0):
            _st_label_535 += 1
            if ExistentialOpExpr_536():
                _st_label_535 += 1
            else:
                super()._label('_st_label_535', block=True)
                _st_label_535 -= 1
        cipherAS = AES.new(self._state.kAS, AES.MODE_CBC, encAS[:AES.block_size])
        serial_pt = unpad(cipherAS.decrypt(encAS[AES.block_size:]))
        loops = pickle_loops
        start_time = time.process_time()
        for i in range(loops):
            (nA2, kAB, B2, encSB) = pickle.loads(serial_pt)
        self._state.results.append(['pickle.loads', 'sym_decrypt', start_time, time.process_time(), loops])
        if ((nA2 == nA) and (B2 == self._state.B)):
            self.send(('msg5', encSB), to=self._state.B)
            super()._label('_st_label_645', block=False)
            encBA = None

            def ExistentialOpExpr_646():
                nonlocal encBA
                for (_, (_, _, _BoundPattern663_), (_ConstantPattern665_, encBA)) in self._RoleAReceivedEvent_2:
                    if (_BoundPattern663_ == self._state.B):
                        if (_ConstantPattern665_ == 'msg6'):
                            if True:
                                return True
                return False
            _st_label_645 = 0
            while (_st_label_645 == 0):
                _st_label_645 += 1
                if ExistentialOpExpr_646():
                    _st_label_645 += 1
                else:
                    super()._label('_st_label_645', block=True)
                    _st_label_645 -= 1
            cipherBA = AES.new(kAB, AES.MODE_CBC, encBA[:AES.block_size])
            serial_pt = unpad(cipherBA.decrypt(encBA[AES.block_size:]))
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                nB = pickle.loads(serial_pt)
            self._state.results.append(['pickle.loads', 'sym_decrypt', start_time, time.process_time(), loops])
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                serial_pt = pickle.dumps((nB - 1))
            self._state.results.append(['pickle.dumps', 'sym_encrypt', start_time, time.process_time(), loops])
            ivAB = Random.new().read(AES.block_size)
            cipherAB = AES.new(kAB, AES.MODE_CBC, ivAB)
            encAB = (ivAB + cipherAB.encrypt(pad(serial_pt)))
            self.send(('msg7', encAB), to=self._state.B)
            self.output('A - Key Exchange Complete')
        for result in self._state.results:
            print(json.dumps(result))

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._RoleBReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_849, sources=[PatternExpr_856], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_848]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_945, sources=[PatternExpr_952], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_2', PatternExpr_1120, sources=[PatternExpr_1127], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_1283):
        super().setup(S=S, kBS=kBS, **rest_1283)
        self._state.S = S
        self._state.kBS = kBS
        Random.atfork()
        self._state.results = []
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_844', block=False)
        _st_label_844 = 0
        while (_st_label_844 == 0):
            _st_label_844 += 1
            if self._state.terminate:
                _st_label_844 += 1
            else:
                super()._label('_st_label_844', block=True)
                _st_label_844 -= 1

    def _RoleB_handler_848(self, A):
        nB1 = random.StrongRandom().getrandbits(128)
        loops = pickle_loops
        start_time = time.process_time()
        for i in range(loops):
            serial_pt = pickle.dumps((A, nB1))
        self._state.results.append(['pickle.dumps', 'sym_encrypt', start_time, time.process_time(), loops])
        ivBS = Random.new().read(AES.block_size)
        cipherBS = AES.new(self._state.kBS, AES.MODE_CBC, ivBS)
        encBS = (ivBS + cipherBS.encrypt(pad(serial_pt)))
        self.send(('msg2', encBS), to=A)
        super()._label('_st_label_942', block=False)
        encSB = None

        def ExistentialOpExpr_943():
            nonlocal encSB
            for (_, (_, _, _BoundPattern960_), (_ConstantPattern962_, encSB)) in self._RoleBReceivedEvent_1:
                if (_BoundPattern960_ == A):
                    if (_ConstantPattern962_ == 'msg5'):
                        if True:
                            return True
            return False
        _st_label_942 = 0
        while (_st_label_942 == 0):
            _st_label_942 += 1
            if ExistentialOpExpr_943():
                _st_label_942 += 1
            else:
                super()._label('_st_label_942', block=True)
                _st_label_942 -= 1
        cipherBS = AES.new(self._state.kBS, AES.MODE_CBC, encSB[:AES.block_size])
        serial_pt = unpad(cipherBS.decrypt(encSB[AES.block_size:]))
        loops = pickle_loops
        start_time = time.process_time()
        for i in range(loops):
            (kAB, nB12, A2) = pickle.loads(serial_pt)
        self._state.results.append(['pickle.loads', 'sym_decrypt', start_time, time.process_time(), loops])
        if ((nB12 == nB1) and (A2 == A)):
            nB2 = random.StrongRandom().getrandbits(128)
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                serial_pt = pickle.dumps(nB2)
            self._state.results.append(['pickle.dumps', 'sym_encrypt', start_time, time.process_time(), loops])
            ivBA = Random.new().read(AES.block_size)
            cipherBA = AES.new(kAB, AES.MODE_CBC, ivBA)
            encBA = (ivBA + cipherBA.encrypt(pad(serial_pt)))
            self.send(('msg6', encBA), to=A)
            super()._label('_st_label_1117', block=False)
            encAB = None

            def ExistentialOpExpr_1118():
                nonlocal encAB
                for (_, (_, _, _BoundPattern1135_), (_ConstantPattern1137_, encAB)) in self._RoleBReceivedEvent_2:
                    if (_BoundPattern1135_ == A):
                        if (_ConstantPattern1137_ == 'msg7'):
                            if True:
                                return True
                return False
            _st_label_1117 = 0
            while (_st_label_1117 == 0):
                _st_label_1117 += 1
                if ExistentialOpExpr_1118():
                    _st_label_1117 += 1
                else:
                    super()._label('_st_label_1117', block=True)
                    _st_label_1117 -= 1
            cipherAB = AES.new(kAB, AES.MODE_CBC, encAB[:AES.block_size])
            serial_pt = unpad(cipherAB.decrypt(encAB[AES.block_size:]))
            loops = pickle_loops
            start_time = time.process_time()
            for i in range(loops):
                nB22 = pickle.loads(serial_pt)
            self._state.results.append(['pickle.loads', 'sym_decrypt', start_time, time.process_time(), loops])
            if (nB22 == (nB2 - 1)):
                self.output('B - Key Exchange Complete')
        for result in self._state.results:
            print(json.dumps(result))
        self._state.terminate = True
    _RoleB_handler_848._labels = None
    _RoleB_handler_848._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        kAS = Random.new().read(32)
        kBS = Random.new().read(32)
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
