# -*- generated by 1.0.12 -*-
import da
PatternExpr_183 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.TuplePattern([da.pat.FreePattern('encAS'), da.pat.FreePattern('encBS')])])
PatternExpr_193 = da.pat.FreePattern('B')
PatternExpr_296 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.TuplePattern([da.pat.BoundPattern('_BoundPattern299_'), da.pat.FreePattern('nB')])])
PatternExpr_305 = da.pat.BoundPattern('_BoundPattern306_')
PatternExpr_340 = da.pat.TuplePattern([da.pat.ConstantPattern('msg6'), da.pat.TuplePattern([da.pat.FreePattern('encSA'), da.pat.FreePattern('encBA')])])
PatternExpr_350 = da.pat.BoundPattern('_BoundPattern351_')
PatternExpr_433 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('nA')])])
PatternExpr_443 = da.pat.BoundPattern('_BoundPattern444_')
PatternExpr_462 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.FreePattern('encAS')])
PatternExpr_469 = da.pat.BoundPattern('_BoundPattern470_')
PatternExpr_504 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.TuplePattern([da.pat.FreePattern('encSA'), da.pat.FreePattern('encSB')])])
PatternExpr_514 = da.pat.BoundPattern('_BoundPattern515_')
PatternExpr_563 = da.pat.TuplePattern([da.pat.ConstantPattern('msg7'), da.pat.FreePattern('encAB')])
PatternExpr_570 = da.pat.BoundPattern('_BoundPattern571_')
_config_object = {}
from sa.secalgoB import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_183, sources=[PatternExpr_193], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_182])])

    def setup(self, kAS, kBS, **rest_647):
        super().setup(kAS=kAS, kBS=kBS, **rest_647)
        self._state.kAS = kAS
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_178', block=False)
        _st_label_178 = 0
        while (_st_label_178 == 0):
            _st_label_178 += 1
            if self._state.terminate:
                _st_label_178 += 1
            else:
                super()._label('_st_label_178', block=True)
                _st_label_178 -= 1

    def _RoleS_handler_182(self, encAS, encBS, B):
        nA = nB = A = None

        def ExistentialOpExpr_197():
            nonlocal nA, nB, A
            for (A, _BoundPattern202_, nA, nB) in [decrypt(encAS, key=self._state.kAS)]:
                if (_BoundPattern202_ == B):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_197():

            def ExistentialOpExpr_216():
                for (_BoundPattern219_, _BoundPattern220_, _BoundPattern221_, _BoundPattern222_) in [decrypt(encBS, key=self._state.kBS)]:
                    if (_BoundPattern219_ == A):
                        if (_BoundPattern220_ == B):
                            if (_BoundPattern221_ == nA):
                                if (_BoundPattern222_ == nB):
                                    if True:
                                        return True
                return False
            if ExistentialOpExpr_216():
                kAB = keygen('shared')
                self.send(('msg5', (encrypt((B, nA, nB, kAB), key=self._state.kAS), encrypt((A, nA, nB, kAB), key=self._state.kBS))), to=B)
        self._state.terminate = True
    _RoleS_handler_182._labels = None
    _RoleS_handler_182._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_296, sources=[PatternExpr_305], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_340, sources=[PatternExpr_350], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_647):
        super().setup(S=S, kAS=kAS, B=B, **rest_647)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        at_fork()

    def run(self):
        nA = nonce()
        self.send(('msg1', (self._id, nA)), to=self._state.B)
        super()._label('_st_label_293', block=False)
        nB = None

        def ExistentialOpExpr_294():
            nonlocal nB
            for (_, (_, _, _BoundPattern313_), (_ConstantPattern315_, (_BoundPattern318_, nB))) in self._RoleAReceivedEvent_0:
                if (_BoundPattern313_ == self._state.B):
                    if (_ConstantPattern315_ == 'msg2'):
                        if (_BoundPattern318_ == self._state.B):
                            if True:
                                return True
            return False
        _st_label_293 = 0
        while (_st_label_293 == 0):
            _st_label_293 += 1
            if ExistentialOpExpr_294():
                _st_label_293 += 1
            else:
                super()._label('_st_label_293', block=True)
                _st_label_293 -= 1
        self.send(('msg3', encrypt((self._id, self._state.B, nA, nB), key=self._state.kAS)), to=self._state.B)
        super()._label('_st_label_337', block=False)
        encSA = encBA = kAB = None

        def ExistentialOpExpr_338():
            nonlocal encSA, encBA, kAB
            for (_, (_, _, _BoundPattern358_), (_ConstantPattern360_, (encSA, encBA))) in self._RoleAReceivedEvent_1:
                if (_BoundPattern358_ == self._state.B):
                    if (_ConstantPattern360_ == 'msg6'):

                        def ExistentialOpExpr_367(encSA):
                            nonlocal kAB
                            for (_BoundPattern370_, _BoundPattern371_, _BoundPattern372_, kAB) in [decrypt(encSA, key=self._state.kAS)]:
                                if (_BoundPattern370_ == self._state.B):
                                    if (_BoundPattern371_ == nA):
                                        if (_BoundPattern372_ == nB):
                                            if True:
                                                return True
                            return False

                        def ExistentialOpExpr_383(encBA):
                            for (_BoundPattern386_, _BoundPattern387_) in [decrypt(encBA, key=kAB)]:
                                if (_BoundPattern386_ == nA):
                                    if (_BoundPattern387_ == nB):
                                        if True:
                                            return True
                            return False
                        if (ExistentialOpExpr_367(encSA=encSA) and ExistentialOpExpr_383(encBA=encBA)):
                            return True
            return False
        _st_label_337 = 0
        while (_st_label_337 == 0):
            _st_label_337 += 1
            if ExistentialOpExpr_338():
                _st_label_337 += 1
            else:
                super()._label('_st_label_337', block=True)
                _st_label_337 -= 1
        self.send(('msg7', encrypt(nB, key=kAB)), to=self._state.B)
        self.output('A - Key Exchange Complete')

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._RoleBReceivedEvent_2 = []
        self._RoleBReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_433, sources=[PatternExpr_443], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_432]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_462, sources=[PatternExpr_469], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_2', PatternExpr_504, sources=[PatternExpr_514], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_3', PatternExpr_563, sources=[PatternExpr_570], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_647):
        super().setup(S=S, kBS=kBS, **rest_647)
        self._state.S = S
        self._state.kBS = kBS
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_428', block=False)
        _st_label_428 = 0
        while (_st_label_428 == 0):
            _st_label_428 += 1
            if self._state.terminate:
                _st_label_428 += 1
            else:
                super()._label('_st_label_428', block=True)
                _st_label_428 -= 1

    def _RoleB_handler_432(self, A, nA):
        nB = nonce()
        self.send(('msg2', (self._id, nB)), to=A)
        super()._label('_st_label_459', block=False)
        encAS = None

        def ExistentialOpExpr_460():
            nonlocal encAS
            for (_, (_, _, _BoundPattern477_), (_ConstantPattern479_, encAS)) in self._RoleBReceivedEvent_1:
                if (_BoundPattern477_ == A):
                    if (_ConstantPattern479_ == 'msg3'):
                        if True:
                            return True
            return False
        _st_label_459 = 0
        while (_st_label_459 == 0):
            _st_label_459 += 1
            if ExistentialOpExpr_460():
                _st_label_459 += 1
            else:
                super()._label('_st_label_459', block=True)
                _st_label_459 -= 1
        self.send(('msg4', (encAS, encrypt((A, self._id, nA, nB), key=self._state.kBS))), to=self._state.S)
        super()._label('_st_label_501', block=False)
        kAB = encSB = encSA = None

        def ExistentialOpExpr_502():
            nonlocal kAB, encSB, encSA
            for (_, (_, _, _BoundPattern522_), (_ConstantPattern524_, (encSA, encSB))) in self._RoleBReceivedEvent_2:
                if (_BoundPattern522_ == self._state.S):
                    if (_ConstantPattern524_ == 'msg5'):

                        def ExistentialOpExpr_530(encSB):
                            nonlocal kAB
                            for (_BoundPattern533_, _BoundPattern534_, _BoundPattern535_, kAB) in [decrypt(encSB, key=self._state.kBS)]:
                                if (_BoundPattern533_ == A):
                                    if (_BoundPattern534_ == nA):
                                        if (_BoundPattern535_ == nB):
                                            if True:
                                                return True
                            return False
                        if ExistentialOpExpr_530(encSB=encSB):
                            return True
            return False
        _st_label_501 = 0
        while (_st_label_501 == 0):
            _st_label_501 += 1
            if ExistentialOpExpr_502():
                _st_label_501 += 1
            else:
                super()._label('_st_label_501', block=True)
                _st_label_501 -= 1
        self.send(('msg6', (encSA, encrypt((nA, nB), key=kAB))), to=A)
        super()._label('_st_label_560', block=False)
        encAB = None

        def ExistentialOpExpr_561():
            nonlocal encAB
            for (_, (_, _, _BoundPattern578_), (_ConstantPattern580_, encAB)) in self._RoleBReceivedEvent_3:
                if (_BoundPattern578_ == A):
                    if (_ConstantPattern580_ == 'msg7'):
                        if (decrypt(encAB, key=kAB) == nB):
                            return True
            return False
        _st_label_560 = 0
        while (_st_label_560 == 0):
            _st_label_560 += 1
            if ExistentialOpExpr_561():
                _st_label_560 += 1
            else:
                super()._label('_st_label_560', block=True)
                _st_label_560 -= 1
        self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_432._labels = None
    _RoleB_handler_432._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
