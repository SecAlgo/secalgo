# -*- generated by 1.0.12 -*-
import da
PatternExpr_260 = da.pat.TuplePattern([da.pat.ConstantPattern('krb_as_req'), da.pat.FreePattern('pvno'), da.pat.FreePattern('msg_type'), da.pat.FreePattern('padata'), da.pat.FreePattern('req_body')])
PatternExpr_273 = da.pat.FreePattern('C')
PatternExpr_515 = da.pat.TuplePattern([da.pat.ConstantPattern('krb_tgs_req'), da.pat.ConstantPattern(5), da.pat.ConstantPattern(12), da.pat.FreePattern('padata'), da.pat.FreePattern('req_body')])
PatternExpr_528 = da.pat.FreePattern('C')
PatternExpr_856 = da.pat.TuplePattern([da.pat.ConstantPattern('krb_ap_req'), da.pat.ConstantPattern(5), da.pat.ConstantPattern(14), da.pat.BoundPattern('_BoundPattern868_'), da.pat.FreePattern('ticket'), da.pat.FreePattern('authenticator')])
PatternExpr_875 = da.pat.FreePattern('C')
PatternExpr_1065 = da.pat.TuplePattern([da.pat.ConstantPattern('krb_as_rep'), da.pat.ConstantPattern(5), da.pat.ConstantPattern(11), da.pat.FreePattern('padata'), da.pat.ConstantPattern('TEST'), da.pat.BoundPattern('_BoundPattern1076_'), da.pat.FreePattern('tgt'), da.pat.FreePattern('enc_part')])
PatternExpr_1083 = da.pat.FreePattern('AS')
PatternExpr_1240 = da.pat.TuplePattern([da.pat.ConstantPattern('krb_tgs_rep'), da.pat.ConstantPattern(5), da.pat.ConstantPattern(13), da.pat.FreePattern('tgs_padata'), da.pat.ConstantPattern('TEST'), da.pat.BoundPattern('_BoundPattern1251_'), da.pat.FreePattern('ticket'), da.pat.FreePattern('tgs_enc_part')])
PatternExpr_1258 = da.pat.FreePattern('TGS')
_config_object = {}
import sys, time, random
from sa.secalgoB import *
DEFAULT_TGT_DURATION = 36000
DEFAULT_TKT_DURATION = 3600
DEFAULT_SKEW = 300
KRB_AP_REQ_TYPE = 14

class Role_AuthServer(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Role_AuthServerReceivedEvent_0', PatternExpr_260, sources=[PatternExpr_273], destinations=None, timestamps=None, record_history=None, handlers=[self._Role_AuthServer_handler_259])])

    def setup(self, clients, servers, TGS, client_keys, server_keys, key_TGS, **rest_1540):
        super().setup(clients=clients, servers=servers, TGS=TGS, client_keys=client_keys, server_keys=server_keys, key_TGS=key_TGS, **rest_1540)
        self._state.clients = clients
        self._state.servers = servers
        self._state.TGS = TGS
        self._state.client_keys = client_keys
        self._state.server_keys = server_keys
        self._state.key_TGS = key_TGS
        self._state.terminate = False
        self._state.supported_etypes = {17, 18}
        self._state.max_tgt_duration = DEFAULT_TGT_DURATION
        self._state.skew = DEFAULT_SKEW
        self._state.per_client_lifetimes = dict()
        for c in self._state.clients:
            self._state.per_client_lifetimes[c] = DEFAULT_TGT_DURATION
        self._state.per_server_lifetimes = dict()
        for s in self._state.servers:
            self._state.per_server_lifetimes[s] = DEFAULT_TGT_DURATION

    def run(self):
        super()._label('_st_label_255', block=False)
        _st_label_255 = 0
        while (_st_label_255 == 0):
            _st_label_255 += 1
            if self._state.terminate:
                _st_label_255 += 1
            else:
                super()._label('_st_label_255', block=True)
                _st_label_255 -= 1

    def _Role_AuthServer_handler_259(self, pvno, msg_type, padata, req_body, C):
        (kdc_options, cname, realm, sname, krb_from, till, rtime, nonce, etype, addresses, enc_authorization_data, additional_tickets) = req_body
        if (not (cname in self._state.clients)):
            return
        if (not (sname in self._state.servers)):
            return
        chosen_etype = None
        for et in etype:
            if ((et in self._state.supported_etypes) and (chosen_etype == None)):
                chosen_etype = et
        if (chosen_etype == None):
            return
        key_C_TGS = keygen('shared')
        if ((krb_from == None) or (krb_from < (time.time() + self._state.skew))):
            tgt_start = time.time()
        else:
            return
        tgt_end = min(till, (tgt_start + self._state.per_client_lifetimes[cname]), (tgt_start + self._state.per_server_lifetimes[sname]), (tgt_start + self._state.max_tgt_duration))
        tgt_enc_part = (dict(), key_C_TGS, 'TEST', cname, [], tgt_start, tgt_start, tgt_end, None, [], [])
        new_tgt = [5, 'TEST', sname, encrypt(tgt_enc_part, key=self._state.key_TGS)]
        as_rep_enc_part = [key_C_TGS, (0, 0), nonce, 0, dict(), tgt_start, tgt_start, tgt_end, 0, 'TEST', sname, []]
        self.output('AS - Sent TGT to client,', cname)
        self.send(('krb_as_rep', 5, 11, [], 'TEST', cname, new_tgt, encrypt(as_rep_enc_part, key=self._state.client_keys[cname])), to=C)
        self._state.terminate = True
    _Role_AuthServer_handler_259._labels = None
    _Role_AuthServer_handler_259._notlabels = None

class Role_TGS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Role_TGSReceivedEvent_0', PatternExpr_515, sources=[PatternExpr_528], destinations=None, timestamps=None, record_history=None, handlers=[self._Role_TGS_handler_514])])

    def setup(self, servers, AS, key_AS_TGS, server_keys, **rest_1540):
        super().setup(servers=servers, AS=AS, key_AS_TGS=key_AS_TGS, server_keys=server_keys, **rest_1540)
        self._state.servers = servers
        self._state.AS = AS
        self._state.key_AS_TGS = key_AS_TGS
        self._state.server_keys = server_keys
        self._state.terminate = False
        self._state.supported_etypes = {17, 18}
        self._state.skew = DEFAULT_SKEW
        self._state.max_tkt_duration = DEFAULT_TKT_DURATION
        self._state.per_server_lifetimes = dict()
        for s in self._state.server_keys:
            self._state.per_server_lifetimes[s] = DEFAULT_TKT_DURATION

    def run(self):
        super()._label('_st_label_510', block=False)
        _st_label_510 = 0
        while (_st_label_510 == 0):
            _st_label_510 += 1
            if self._state.terminate:
                _st_label_510 += 1
            else:
                super()._label('_st_label_510', block=True)
                _st_label_510 -= 1

    def _Role_TGS_handler_514(self, padata, req_body, C):
        (_, msg_type, ap_options, tgt, authenticator) = padata[0]
        if (not (msg_type == 14)):
            return
        (_, realm, sname, tgt_enc_part) = tgt
        (tgt_flags, key_C_TGS, tgt_crealm, tgt_cname, tgt_transited, tgt_authtime, tgt_starttime, tgt_endtime, tgt_renew_till, tgt_caddr, tgt_authorization_data) = decrypt(tgt_enc_part, key=self._state.key_AS_TGS)
        (_, au_crealm, au_cname, cksum, cusec, ctime, subkey, seq_number, authorization_data) = decrypt(authenticator, key=key_C_TGS)
        if ((not (tgt_cname == au_cname)) or (not (tgt_crealm == au_crealm))):
            return
        local_time = time.time()
        if (abs((local_time - ctime)) > self._state.skew):
            return
        if (tgt_starttime > (local_time + self._state.skew)):
            return
        if ((local_time - tgt_endtime) > self._state.skew):
            return
        self.output('TGS - Authenticated client:', au_cname)
        (kdc_options, cname, realm, sname, krb_from, till, rtime, nonce, etype, addresses, enc_authorization_data, additional_tickets) = req_body
        if (not (sname in self._state.server_keys)):
            return
        chosen_etype = None
        for et in etype:
            if ((et in self._state.supported_etypes) and (chosen_etype == None)):
                chosen_etype = et
        if (chosen_etype == None):
            return
        key_C_S = keygen('shared')
        if ((krb_from == None) or (krb_from < (local_time + self._state.skew))):
            ticket_start = local_time
        ticket_end = min(till, tgt_endtime, (tgt_starttime + self._state.per_server_lifetimes[sname]), (tgt_starttime + self._state.max_tkt_duration))
        ticket_enc_part = [dict(), key_C_S, tgt_crealm, tgt_cname, tgt_transited, tgt_authtime, ticket_start, ticket_end, 0, tgt_caddr, []]
        new_ticket = [5, 'TEST', sname, encrypt(ticket_enc_part, key=self._state.server_keys[sname])]
        tgs_rep_enc_part = [key_C_S, (0, 0), nonce, 0, dict(), tgt_authtime, ticket_start, ticket_end, 0, 'TEST', sname, tgt_caddr]
        self.output('TGS - Sent Ticket for server', sname, 'to client,', C)
        self.send(('krb_tgs_rep', 5, 13, [], 'TEST', tgt_cname, new_ticket, encrypt(tgs_rep_enc_part, key=key_C_TGS)), to=C)
        self._state.terminate = True
    _Role_TGS_handler_514._labels = None
    _Role_TGS_handler_514._notlabels = None

class Role_AppServer(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Role_AppServerReceivedEvent_0', PatternExpr_856, sources=[PatternExpr_875], destinations=None, timestamps=None, record_history=None, handlers=[self._Role_AppServer_handler_855])])

    def setup(self, AS, TGS, key_S_AS, key_S_TGS, **rest_1540):
        super().setup(AS=AS, TGS=TGS, key_S_AS=key_S_AS, key_S_TGS=key_S_TGS, **rest_1540)
        self._state.AS = AS
        self._state.TGS = TGS
        self._state.key_S_AS = key_S_AS
        self._state.key_S_TGS = key_S_TGS
        self._state.terminate = False
        self._state.S = self._id
        self._state.skew = DEFAULT_SKEW

    def run(self):
        super()._label('_st_label_851', block=False)
        _st_label_851 = 0
        while (_st_label_851 == 0):
            _st_label_851 += 1
            if self._state.terminate:
                _st_label_851 += 1
            else:
                super()._label('_st_label_851', block=True)
                _st_label_851 -= 1

    def _Role_AppServer_handler_855(self, ticket, authenticator, C):
        (tkt_vno, realm, sname, tkt_enc_part) = ticket
        (tkt_flags, key_C_S, tkt_crealm, tkt_cname, tkt_transited, tkt_authtime, tkt_starttime, tkt_endtime, tkt_renew_till, tkt_caddr, tkt_authorization_data) = decrypt(tkt_enc_part, key=self._state.key_S_TGS)
        (_, au_crealm, au_cname, au_cksum, au_cusec, au_ctime, au_subkey, au_seq_number, au_authorization_data) = decrypt(authenticator, key=key_C_S)
        if ((not (au_crealm == tkt_crealm)) or (not (au_cname == tkt_cname))):
            return
        local_time = time.time()
        if (abs((local_time - au_ctime)) > self._state.skew):
            return
        if (tkt_starttime > (local_time + self._state.skew)):
            return
        if ((local_time - tkt_endtime) > self._state.skew):
            return
        self.output('Server:', self._state.S, '- Authenticated client:', au_cname)
        self._state.terminate = True
    _Role_AppServer_handler_855._labels = None
    _Role_AppServer_handler_855._notlabels = None

class Role_C(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Role_CReceivedEvent_0 = []
        self._Role_CReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Role_CReceivedEvent_0', PatternExpr_1065, sources=[PatternExpr_1083], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Role_CReceivedEvent_1', PatternExpr_1240, sources=[PatternExpr_1258], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, realm, servers, AS, TGS, key_C_AS, **rest_1540):
        super().setup(realm=realm, servers=servers, AS=AS, TGS=TGS, key_C_AS=key_C_AS, **rest_1540)
        self._state.realm = realm
        self._state.servers = servers
        self._state.AS = AS
        self._state.TGS = TGS
        self._state.key_C_AS = key_C_AS
        self._state.C = self._id

    def run(self):
        S = random.choice(tuple(self._state.servers))
        nonce_C_AS = nonce()
        as_req_body = [dict(), self._state.C, 'TEST', S, 0, (time.time() + (5 * 3600)), 0, nonce_C_AS, [18, 17], [], [], []]
        self.output('Client - Sent request to AS for credentials for server,', S)
        self.send(('krb_as_req', 5, 10, [], as_req_body), to=self._state.AS)
        super()._label('_st_label_1062', block=False)
        padata = enc_part = tgt = AS = None

        def ExistentialOpExpr_1063():
            nonlocal padata, enc_part, tgt, AS
            for (_, (_, _, self._state.AS), (_ConstantPattern1093_, _ConstantPattern1095_, _ConstantPattern1097_, padata, _ConstantPattern1100_, _BoundPattern1102_, tgt, enc_part)) in self._Role_CReceivedEvent_0:
                if (_ConstantPattern1093_ == 'krb_as_rep'):
                    if (_ConstantPattern1095_ == 5):
                        if (_ConstantPattern1097_ == 11):
                            if (_ConstantPattern1100_ == 'TEST'):
                                if (_BoundPattern1102_ == self._state.C):
                                    if True:
                                        return True
            return False
        _st_label_1062 = 0
        while (_st_label_1062 == 0):
            _st_label_1062 += 1
            if ExistentialOpExpr_1063():
                _st_label_1062 += 1
            else:
                super()._label('_st_label_1062', block=True)
                _st_label_1062 -= 1
        (key_C_TGS, last_req, as_nonce, key_expiration, flags, authtime, starttime, endtime, renew_till, srealm, sname, caddr) = decrypt(enc_part, key=self._state.key_C_AS)
        if (as_nonce == nonce_C_AS):
            if ((sname == S) and (srealm == 'TEST')):
                self.output('Client - Acquired TGT from AS')
        else:
            key_C_TGS = None
            tgt = None
        if (not (tgt == None)):
            authenticator = [5, self._state.realm, self._state.C, None, 0, time.time(), None, None, []]
            tgs_krb_ap_req = [5, 14, dict(), tgt, encrypt(authenticator, key=key_C_TGS)]
            nonce_C_TGS = nonce()
            tgs_req_body = [dict(), None, 'TEST', S, 0, (time.time() + (5 * 3600)), 0, nonce_C_TGS, [18, 17], [], [], []]
            self.output('Client - Sent TGT and request to TGS for credentials', 'for server,', S)
            self.send(('krb_tgs_req', 5, 12, [tgs_krb_ap_req], tgs_req_body), to=self._state.TGS)
            super()._label('_st_label_1237', block=False)
            TGS = tgs_padata = tgs_enc_part = ticket = None

            def ExistentialOpExpr_1238():
                nonlocal TGS, tgs_padata, tgs_enc_part, ticket
                for (_, (_, _, self._state.TGS), (_ConstantPattern1268_, _ConstantPattern1270_, _ConstantPattern1272_, tgs_padata, _ConstantPattern1275_, _BoundPattern1277_, ticket, tgs_enc_part)) in self._Role_CReceivedEvent_1:
                    if (_ConstantPattern1268_ == 'krb_tgs_rep'):
                        if (_ConstantPattern1270_ == 5):
                            if (_ConstantPattern1272_ == 13):
                                if (_ConstantPattern1275_ == 'TEST'):
                                    if (_BoundPattern1277_ == self._state.C):
                                        if True:
                                            return True
                return False
            _st_label_1237 = 0
            while (_st_label_1237 == 0):
                _st_label_1237 += 1
                if ExistentialOpExpr_1238():
                    _st_label_1237 += 1
                else:
                    super()._label('_st_label_1237', block=True)
                    _st_label_1237 -= 1
            (key_C_S, tgs_last_req, tgs_nonce, tgs_key_expiration, tgs_flags, tgs_authtime, tgs_starttime, tgs_endtime, tgs_renew_till, tgs_srealm, tgs_sname, tgs_caddr) = decrypt(tgs_enc_part, key=key_C_TGS)
            if (tgs_nonce == nonce_C_TGS):
                if ((tgs_sname == S) and (tgs_srealm == 'TEST')):
                    self.output('Client - Acquired Ticket from TGS')
            else:
                key_C_S = None
                ticket = None
        if (not (key_C_S == None)):
            ap_authenticator = [5, self._state.realm, self._state.C, None, None, time.time(), None, None, []]
            self.send(('krb_ap_req', 5, 14, dict(), ticket, encrypt(ap_authenticator, key=key_C_S)), to=S)
            self.output('Client - Sent authentication request to server,', S)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        num_clients = (int(sys.argv[1]) if (len(sys.argv) > 1) else 1)
        num_servers = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        C = self.new(Role_C, num=num_clients)
        S = self.new(Role_AppServer, num=num_servers)
        TGS = self.new(Role_TGS)
        AS = self.new(Role_AuthServer)
        client_keys = dict()
        for client in C:
            key_C_AS = keygen('shared')
            self._setup(client, ('TEST', S, AS, TGS, key_C_AS))
            client_keys[client] = key_C_AS
        as_server_keys = dict()
        tgs_server_keys = dict()
        for server in S:
            key_S_AS = keygen('shared')
            as_server_keys[server] = key_S_AS
            key_S_TGS = keygen('shared')
            tgs_server_keys[server] = key_S_TGS
            self._setup(server, (AS, TGS, key_S_AS, key_S_TGS))
        key_AS_TGS = keygen('shared')
        self._setup(AS, (C, S, TGS, client_keys, as_server_keys, key_AS_TGS))
        self._setup(TGS, (S, AS, key_AS_TGS, tgs_server_keys))
        self._start(AS)
        self._start(TGS)
        self._start(S)
        self._start(C)
