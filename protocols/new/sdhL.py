# -*- generated by 1.0.12 -*-
import da
PatternExpr_214 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.BoundPattern('_BoundPattern217_'), da.pat.BoundPattern('_BoundPattern218_'), da.pat.FreePattern('dh_Y'), da.pat.FreePattern('m')])
PatternExpr_225 = da.pat.BoundPattern('_BoundPattern226_')
PatternExpr_320 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('A'), da.pat.FreePattern('s'), da.pat.FreePattern('dh_X')])
PatternExpr_331 = da.pat.BoundPattern('_BoundPattern332_')
PatternExpr_381 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.BoundPattern('_BoundPattern384_'), da.pat.BoundPattern('_BoundPattern385_'), da.pat.FreePattern('m')])
PatternExpr_390 = da.pat.BoundPattern('_BoundPattern391_')
_config_object = {}
from sa.secalgoB import *
configure(verify_returns='bool')

class RoleA(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleAReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_214, sources=[PatternExpr_225], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, skSigA, pkSigA, B, pkSigB, p, g, **rest_508):
        super().setup(skSigA=skSigA, pkSigA=pkSigA, B=B, pkSigB=pkSigB, p=p, g=g, **rest_508)
        self._state.skSigA = skSigA
        self._state.pkSigA = pkSigA
        self._state.B = B
        self._state.pkSigB = pkSigB
        self._state.p = p
        self._state.g = g
        at_fork()

    def run(self):
        s = nonce(128)
        (dh_x, dh_X, _, _) = keygen('dh', dh_p=self._state.p, dh_g=self._state.g)
        self.send(('msg1', self._id, s, dh_X), to=self._state.B)
        super()._label('_st_label_211', block=False)
        m = dh_Y = None

        def ExistentialOpExpr_212():
            nonlocal m, dh_Y
            for (_, (_, _, _BoundPattern233_), (_ConstantPattern235_, _BoundPattern237_, _BoundPattern238_, dh_Y, m)) in self._RoleAReceivedEvent_0:
                if (_BoundPattern233_ == self._state.B):
                    if (_ConstantPattern235_ == 'msg2'):
                        if (_BoundPattern237_ == self._state.B):
                            if (_BoundPattern238_ == s):
                                if True:
                                    return True
            return False
        _st_label_211 = 0
        while (_st_label_211 == 0):
            _st_label_211 += 1
            if ExistentialOpExpr_212():
                _st_label_211 += 1
            else:
                super()._label('_st_label_211', block=True)
                _st_label_211 -= 1
        if (not (verify(((self._state.B, s, dh_Y, dh_X, self._id), m), key=self._state.pkSigB) == None)):
            self.send(('msg3', self._id, s, sign((self._id, s, dh_X, dh_Y, self._state.B), key=self._state.skSigA)), to=self._state.B)
            kAB = local_pow(dh_Y, dh_x, self._state.p)
            dh_x = None
            self.output('A - Authenticated Exchange of Key Material Complete')

class RoleB(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleBReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_320, sources=[PatternExpr_331], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_319]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_381, sources=[PatternExpr_390], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, skSigB, pkSigB, pkSigA, p, g, **rest_508):
        super().setup(skSigB=skSigB, pkSigB=pkSigB, pkSigA=pkSigA, p=p, g=g, **rest_508)
        self._state.skSigB = skSigB
        self._state.pkSigB = pkSigB
        self._state.pkSigA = pkSigA
        self._state.p = p
        self._state.g = g
        at_fork()
        self._state.terminate = False

    def run(self):
        super()._label('_st_label_315', block=False)
        _st_label_315 = 0
        while (_st_label_315 == 0):
            _st_label_315 += 1
            if self._state.terminate:
                _st_label_315 += 1
            else:
                super()._label('_st_label_315', block=True)
                _st_label_315 -= 1

    def _RoleB_handler_319(self, A, s, dh_X):
        (dh_y, dh_Y, _, _) = keygen('dh', dh_p=self._state.p, dh_g=self._state.g)
        self.send(('msg2', self._id, s, dh_Y, sign((self._id, s, dh_Y, dh_X, A), key=self._state.skSigB)), to=A)
        kAB = local_pow(dh_X, dh_y, self._state.p)
        dh_y = None
        super()._label('_st_label_378', block=False)
        m = None

        def ExistentialOpExpr_379():
            nonlocal m
            for (_, (_, _, _BoundPattern398_), (_ConstantPattern400_, _BoundPattern402_, _BoundPattern403_, m)) in self._RoleBReceivedEvent_1:
                if (_BoundPattern398_ == A):
                    if (_ConstantPattern400_ == 'msg3'):
                        if (_BoundPattern402_ == A):
                            if (_BoundPattern403_ == s):
                                if True:
                                    return True
            return False
        _st_label_378 = 0
        while (_st_label_378 == 0):
            _st_label_378 += 1
            if ExistentialOpExpr_379():
                _st_label_378 += 1
            else:
                super()._label('_st_label_378', block=True)
                _st_label_378 -= 1
        if (not (verify(((A, s, dh_X, dh_Y, self._id), m), key=self._state.pkSigA) == None)):
            self.output('B - Authenticated Exchange of Key Material Complete')
        self._state.terminate = True
    _RoleB_handler_319._labels = None
    _RoleB_handler_319._notlabels = None

@dec_timer
def local_pow(a, b, c):
    return pow(a, b, c)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        (skSigA, pkSigA) = keygen('public')
        (skSigB, pkSigB) = keygen('public')
        (_, _, dh_g, dh_p) = keygen('dh', dh_group=17)
        B = self.new(RoleB, (skSigB, pkSigB, pkSigA, dh_p, dh_g))
        A = self.new(RoleA, (skSigA, pkSigA, B, pkSigB, dh_p, dh_g))
        self._start(B)
        self._start(A)
