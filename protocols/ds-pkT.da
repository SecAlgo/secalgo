"""
Denning-Sacco Public Key Key Exchange Protocols
Written by Christopher Kane

Original Source:
Dorothy Denning and Giovanni Sacco, "Timestamps in Key Distribution Protocols",
Communications of the ACM, v.24.8, Aug. 1981, p. 533-536.

Protocol Diagram:
  (1) A -> S: (A, B)
  (2) S -> A: (CA, CB)
  (3) A -> B: (CA, CB, enc(sign((K, T), skA), pkB))

CA and CB are certificates containing the name and public key of A and B
respecitively signed by the key server S. Certificates look like this:
  CX == (X, pkX, T, sign((X, pkX, T), skS))
T is a timestamp. Denning and Sacco give no details concerning the format of
the timestamp, and, though they discuss how the timestamp can be validated,
they do not explain how this validation should be incorporated into the
protocol.
"""

import time, gc
#from sa.secalgo import *
from sa.secalgoB import *
from sa.timers import dec_proto_run_timer

class roleA(process):
    def setup(B, S, skA, pkA, pkS):
        gc.disable()
        at_fork()
        self.i = 1

    #@dec_proto_run_timer
    def run():
        send(('msg01', i, self, B), to = S)
        await(some(received(('msg02', _i, (A, _pkA, tA, sigA),
                             (_B, pkB, tB, sigB)), from_ = _S),
                   has = (A == self)))
        if (verify((A, dict(pkA), tA), sigA, key = pkS) and
            verify((B, dict(pkB), tB), sigB, key = pkS)):
            kAB = keygen('shared')
            tAB = time.time()
            send(('msg03', i, (A, pkA, tA, sigA), (B, dict(pkB), tB, sigB),
                  encrypt(((kAB, tAB), sign((kAB, tAB), key = skA)), key = pkB)),
                 to = B)
            output('Initiator: Key Exchange Complete')
        else:
            output('Initiator: Could not verify certificates')
        i += 1

class roleB(process):
    def setup(S, skB, pkB, pkS):
        gc.disable()
        at_fork()
        self.terminate = False

    #@dec_proto_run_timer
    def run():
        terminate = False
        await(terminate)

    def receive(msg=('msg03', i, (A, pkA, tA, sigA),
                     (B, pkB, tB, sigB), encKey), from_ = A):
        if (verify((A, pkA, tA), sigA, key = pkS) and
            verify((B, pkB, tB), sigB, key = pkS) and B == self):
            (kAB, tAB), sigAB = decrypt(encKey, key = skB)
            if verify((kAB, tAB), sigAB, key = pkA):
                output('Recipient: Key Exchange Complete')
                pass
            else:
                output('Recipient: Could not verify signature on shared key')
        else:
            output('Recipient: Could not verify certificates')
        terminate = True

class roleS(process):
    def setup(skS, pkS, client_keys):
        gc.disable()
        at_fork()
        self.terminate = False

    #@dec_proto_run_timer
    def run():
        terminate = False
        await(terminate)
        
    def receive(msg=('msg01', i, A, B), from_ = _A):
        pkA = [x for (p, x) in client_keys if p == A].pop()
        pkB = [x for (p, x) in client_keys if p == B].pop()
        tA = tB = time.time()
        send(('msg02', i, (A, pkA, tA, sign((A, pkA, tA), key = skS)),
            (B, pkB, tB, sign((B, pkB, tB), key = skS))), to = A)
        output('Server: Certificates Sent')
        terminate = True

def main():
    gc.disable()
    skS, pkS = keygen('public')
    skA, pkA = keygen('public')
    skB, pkB = keygen('public')
    S = new(roleS)
    B = new(roleB, (S, skB, pkB, pkS))
    A = new(roleA, (B, S, skA, pkA, pkS))
    setup(S, (skS, pkS, [(A, pkA), (B, pkB)]))
    start(S)
    start(B)
    start(A)
