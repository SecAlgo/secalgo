# -*- generated by 1.0.9 -*-
import da
PatternExpr_176 = da.pat.TuplePattern([da.pat.ConstantPattern('1'), da.pat.FreePattern('m')])
PatternExpr_183 = da.pat.FreePattern('I')
PatternExpr_250 = da.pat.TuplePattern([da.pat.ConstantPattern('2'), da.pat.FreePattern('m')])
PatternExpr_257 = da.pat.BoundPattern('_BoundPattern258_')
PatternExpr_291 = da.pat.TuplePattern([da.pat.ConstantPattern('4'), da.pat.FreePattern('m2')])
PatternExpr_298 = da.pat.BoundPattern('_BoundPattern299_')
PatternExpr_368 = da.pat.TuplePattern([da.pat.ConstantPattern('3'), da.pat.FreePattern('m')])
PatternExpr_375 = da.pat.FreePattern('I')
PatternExpr_406 = da.pat.TuplePattern([da.pat.ConstantPattern('5'), da.pat.FreePattern('m2')])
PatternExpr_413 = da.pat.BoundPattern('_BoundPattern414_')
_config_object = {}
from sa.secalgo import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_176, sources=[PatternExpr_183], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_175])])

    def setup(self, K_IS, K_RS, **rest_500):
        super().setup(K_IS=K_IS, K_RS=K_RS, **rest_500)
        self._state.K_IS = K_IS
        self._state.K_RS = K_RS
        pass

    def run(self):
        super()._label('_st_label_168', block=False)
        _st_label_168 = 0
        self._timer_start()
        while (_st_label_168 == 0):
            _st_label_168 += 1
            if False:
                pass
                _st_label_168 += 1
            elif self._timer_expired:
                pass
                _st_label_168 += 1
            else:
                super()._label('_st_label_168', block=True, timeout=10)
                _st_label_168 -= 1

    def _RoleS_handler_175(self, m, I):
        K_IR = keygen('shared')
        self.send(('2', (encrypt((m[2], K_IR, m[1], encrypt((K_IR, m[0]), key=self._state.K_RS)), key=self._state.K_IS),)), to=I)
    _RoleS_handler_175._labels = None
    _RoleS_handler_175._notlabels = None

class RoleI(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleIReceivedEvent_0 = []
        self._RoleIReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_0', PatternExpr_250, sources=[PatternExpr_257], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_1', PatternExpr_291, sources=[PatternExpr_298], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, K_IS, R, **rest_500):
        super().setup(S=S, K_IS=K_IS, R=R, **rest_500)
        self._state.S = S
        self._state.K_IS = K_IS
        self._state.R = R
        pass

    def run(self):
        N_I = nonce()
        self.send(('1', (self._id, self._state.R, N_I)), to=self._state.S)
        super()._label('_st_label_247', block=False)
        m = None

        def ExistentialOpExpr_248():
            nonlocal m
            for (_, (_, _, _BoundPattern265_), (_ConstantPattern267_, m)) in self._RoleIReceivedEvent_0:
                if (_BoundPattern265_ == self._state.S):
                    if (_ConstantPattern267_ == '2'):
                        if True:
                            return True
            return False
        _st_label_247 = 0
        while (_st_label_247 == 0):
            _st_label_247 += 1
            if ExistentialOpExpr_248():
                _st_label_247 += 1
            else:
                super()._label('_st_label_247', block=True)
                _st_label_247 -= 1
        self.send(('3', (decrypt(m[0], key=self._state.K_IS)[3],)), to=self._state.R)
        super()._label('_st_label_288', block=False)
        m2 = None

        def ExistentialOpExpr_289():
            nonlocal m2
            for (_, (_, _, _BoundPattern306_), (_ConstantPattern308_, m2)) in self._RoleIReceivedEvent_1:
                if (_BoundPattern306_ == self._state.R):
                    if (_ConstantPattern308_ == '4'):
                        if True:
                            return True
            return False
        _st_label_288 = 0
        while (_st_label_288 == 0):
            _st_label_288 += 1
            if ExistentialOpExpr_289():
                _st_label_288 += 1
            else:
                super()._label('_st_label_288', block=True)
                _st_label_288 -= 1
        self.send(('5', (encrypt((decrypt(m2[0], key=decrypt(m[0], key=self._state.K_IS)[1]) - 1), key=decrypt(m[0], key=self._state.K_IS)[1]),)), to=self._state.R)
        self.output('I - Key Exchange Complete')

class RoleR(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleRReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_0', PatternExpr_368, sources=[PatternExpr_375], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleR_handler_367]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_1', PatternExpr_406, sources=[PatternExpr_413], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, K_RS, **rest_500):
        super().setup(S=S, K_RS=K_RS, **rest_500)
        self._state.S = S
        self._state.K_RS = K_RS
        pass

    def run(self):
        super()._label('_st_label_360', block=False)
        _st_label_360 = 0
        self._timer_start()
        while (_st_label_360 == 0):
            _st_label_360 += 1
            if False:
                pass
                _st_label_360 += 1
            elif self._timer_expired:
                pass
                _st_label_360 += 1
            else:
                super()._label('_st_label_360', block=True, timeout=10)
                _st_label_360 -= 1

    def _RoleR_handler_367(self, m, I):
        N_R = nonce()
        self.send(('4', (encrypt(N_R, key=decrypt(m[0], key=self._state.K_RS)[0]),)), to=I)
        super()._label('_st_label_403', block=False)
        m2 = None

        def ExistentialOpExpr_404():
            nonlocal m2
            for (_, (_, _, _BoundPattern421_), (_ConstantPattern423_, m2)) in self._RoleRReceivedEvent_1:
                if (_BoundPattern421_ == I):
                    if (_ConstantPattern423_ == '5'):
                        if True:
                            return True
            return False
        _st_label_403 = 0
        while (_st_label_403 == 0):
            _st_label_403 += 1
            if ExistentialOpExpr_404():
                _st_label_403 += 1
            else:
                super()._label('_st_label_403', block=True)
                _st_label_403 -= 1
        if ((N_R - 1) == decrypt(m2[0], key=decrypt(m[0], key=self._state.K_RS)[0])):
            self.output('R - Key Exchange Complete')
    _RoleR_handler_367._labels = None
    _RoleR_handler_367._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        K_IS = keygen('shared')
        K_RS = keygen('shared')
        S = self.new(RoleS, (K_IS, K_RS))
        R = self.new(RoleR, (S, K_RS))
        I = self.new(RoleI, (S, K_IS, R))
        self._start(S)
        self._start(R)
        self._start(I)
