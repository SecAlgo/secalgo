# -*- generated by 1.1.0b10 -*-
import da
PatternExpr_199 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.FreePattern('i'), da.pat.TuplePattern([da.pat.FreePattern('A'), da.pat.FreePattern('B'), da.pat.FreePattern('nA'), da.pat.FreePattern('encBS')])])
PatternExpr_215 = da.pat.BoundPattern('_BoundPattern216_')
PatternExpr_299 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.BoundPattern('_BoundPattern302_'), da.pat.FreePattern('encBS')])
PatternExpr_307 = da.pat.BoundPattern('_BoundPattern308_')
PatternExpr_344 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.BoundPattern('_BoundPattern347_'), da.pat.FreePattern('encAS')])
PatternExpr_352 = da.pat.BoundPattern('_BoundPattern353_')
PatternExpr_395 = da.pat.TuplePattern([da.pat.ConstantPattern('msg6'), da.pat.BoundPattern('_BoundPattern398_'), da.pat.FreePattern('encBA')])
PatternExpr_403 = da.pat.BoundPattern('_BoundPattern404_')
PatternExpr_481 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('i'), da.pat.FreePattern('A')])
PatternExpr_490 = da.pat.BoundPattern('_BoundPattern491_')
PatternExpr_514 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.BoundPattern('_BoundPattern517_'), da.pat.FreePattern('encSB')])
PatternExpr_522 = da.pat.BoundPattern('_BoundPattern523_')
PatternExpr_571 = da.pat.TuplePattern([da.pat.ConstantPattern('msg7'), da.pat.BoundPattern('_BoundPattern574_'), da.pat.FreePattern('enc_AB')])
PatternExpr_579 = da.pat.BoundPattern('_BoundPattern580_')
_config_object = {}
import sys, gc
from sa.secalgoB import *
from sa.timers import dec_proto_run_timer

class RoleS(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_199, sources=[PatternExpr_215], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_198])])

    def setup(self, kAS, kBS, **rest_664):
        super().setup(kAS=kAS, kBS=kBS, **rest_664)
        self._state.kAS = kAS
        self._state.kBS = kBS
        gc.disable()
        at_fork()
        self._state.terminate = False

    def run(self):
        self._state.terminate = False
        super()._label('_st_label_193', block=False)
        _st_label_193 = 0
        while (_st_label_193 == 0):
            _st_label_193 += 1
            if self._state.terminate:
                _st_label_193 += 1
            else:
                super()._label('_st_label_193', block=True)
                _st_label_193 -= 1
        for attr in dir(self):
            if (attr.find('ReceivedEvent_') != (- 1)):
                getattr(self, attr).clear()

    def _RoleS_handler_198(self, i, A, B, nA, encBS):
        nB1 = None

        def ExistentialOpExpr_218():
            nonlocal nB1
            for (_BoundPattern221_, nB1) in [decrypt(encBS, key=self._state.kBS)]:
                if (_BoundPattern221_ == A):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_218():
            kAB = keygen('shared')
            self.send(('msg4', i, encrypt((nA, kAB, B, encrypt((kAB, nB1, A), key=self._state.kBS)), key=self._state.kAS)), to=A)
        self._state.terminate = True
    _RoleS_handler_198._labels = None
    _RoleS_handler_198._notlabels = None

class RoleA(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._RoleAReceivedEvent_0 = []
        self._RoleAReceivedEvent_1 = []
        self._RoleAReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_0', PatternExpr_299, sources=[PatternExpr_307], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_1', PatternExpr_344, sources=[PatternExpr_352], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleAReceivedEvent_2', PatternExpr_395, sources=[PatternExpr_403], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kAS, B, **rest_664):
        super().setup(S=S, kAS=kAS, B=B, **rest_664)
        self._state.S = S
        self._state.kAS = kAS
        self._state.B = B
        gc.disable()
        at_fork()
        self._state.i = 1

    def run(self):
        self.send(('msg1', self._state.i, self), to=self._state.B)
        super()._label('_st_label_296', block=False)
        encBS = None

        def ExistentialOpExpr_297():
            nonlocal encBS
            for (_, (_, _, _BoundPattern315_), (_ConstantPattern317_, _BoundPattern319_, encBS)) in self._RoleAReceivedEvent_0:
                if (_BoundPattern315_ == self._state.B):
                    if (_ConstantPattern317_ == 'msg2'):
                        if (_BoundPattern319_ == self._state.i):
                            if True:
                                return True
            return False
        _st_label_296 = 0
        while (_st_label_296 == 0):
            _st_label_296 += 1
            if ExistentialOpExpr_297():
                _st_label_296 += 1
            else:
                super()._label('_st_label_296', block=True)
                _st_label_296 -= 1
        nA = nonce()
        self.send(('msg3', self._state.i, (self, self._state.B, nA, encBS)), to=self._state.S)
        super()._label('_st_label_341', block=False)
        encAS = encSB = kAB = None

        def ExistentialOpExpr_342():
            nonlocal encAS, encSB, kAB
            for (_, (_, _, _BoundPattern360_), (_ConstantPattern362_, _BoundPattern364_, encAS)) in self._RoleAReceivedEvent_1:
                if (_BoundPattern360_ == self._state.S):
                    if (_ConstantPattern362_ == 'msg4'):
                        if (_BoundPattern364_ == self._state.i):

                            def ExistentialOpExpr_367(encAS):
                                nonlocal encSB, kAB
                                for (_BoundPattern370_, kAB, _BoundPattern373_, encSB) in [decrypt(encAS, key=self._state.kAS)]:
                                    if (_BoundPattern370_ == nA):
                                        if (_BoundPattern373_ == self._state.B):
                                            if True:
                                                return True
                                return False
                            if ExistentialOpExpr_367(encAS=encAS):
                                return True
            return False
        _st_label_341 = 0
        while (_st_label_341 == 0):
            _st_label_341 += 1
            if ExistentialOpExpr_342():
                _st_label_341 += 1
            else:
                super()._label('_st_label_341', block=True)
                _st_label_341 -= 1
        self.send(('msg5', self._state.i, encSB), to=self._state.B)
        super()._label('_st_label_392', block=False)
        encBA = None

        def ExistentialOpExpr_393():
            nonlocal encBA
            for (_, (_, _, _BoundPattern411_), (_ConstantPattern413_, _BoundPattern415_, encBA)) in self._RoleAReceivedEvent_2:
                if (_BoundPattern411_ == self._state.B):
                    if (_ConstantPattern413_ == 'msg6'):
                        if (_BoundPattern415_ == self._state.i):
                            if True:
                                return True
            return False
        _st_label_392 = 0
        while (_st_label_392 == 0):
            _st_label_392 += 1
            if ExistentialOpExpr_393():
                _st_label_392 += 1
            else:
                super()._label('_st_label_392', block=True)
                _st_label_392 -= 1
        nB = decrypt(encBA, key=kAB)
        self.send(('msg7', self._state.i, encrypt((nB - 1), key=kAB)), to=self._state.B)
        self.output('A - Key Exchange Complete')
        self._state.i += 1
        for attr in dir(self):
            if (attr.find('ReceivedEvent_') != (- 1)):
                getattr(self, attr).clear()

class RoleB(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._RoleBReceivedEvent_1 = []
        self._RoleBReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_0', PatternExpr_481, sources=[PatternExpr_490], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleB_handler_480]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_1', PatternExpr_514, sources=[PatternExpr_522], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleBReceivedEvent_2', PatternExpr_571, sources=[PatternExpr_579], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, kBS, **rest_664):
        super().setup(S=S, kBS=kBS, **rest_664)
        self._state.S = S
        self._state.kBS = kBS
        gc.disable()
        at_fork()
        self._state.terminate = False

    def run(self):
        self._state.terminate = False
        super()._label('_st_label_475', block=False)
        _st_label_475 = 0
        while (_st_label_475 == 0):
            _st_label_475 += 1
            if self._state.terminate:
                _st_label_475 += 1
            else:
                super()._label('_st_label_475', block=True)
                _st_label_475 -= 1
        for attr in dir(self):
            if (attr.find('ReceivedEvent_') != (- 1)):
                getattr(self, attr).clear()

    def _RoleB_handler_480(self, i, A):
        nB1 = nonce()
        self.send(('msg2', i, encrypt((A, nB1), key=self._state.kBS)), to=A)
        super()._label('_st_label_511', block=False)
        kAB = encSB = None

        def ExistentialOpExpr_512():
            nonlocal kAB, encSB
            for (_, (_, _, _BoundPattern530_), (_ConstantPattern532_, _BoundPattern534_, encSB)) in self._RoleBReceivedEvent_1:
                if (_BoundPattern530_ == A):
                    if (_ConstantPattern532_ == 'msg5'):
                        if (_BoundPattern534_ == i):

                            def ExistentialOpExpr_537(encSB):
                                nonlocal kAB
                                for (kAB, _BoundPattern542_, _BoundPattern543_) in [decrypt(encSB, key=self._state.kBS)]:
                                    if (_BoundPattern542_ == nB1):
                                        if (_BoundPattern543_ == A):
                                            if True:
                                                return True
                                return False
                            if ExistentialOpExpr_537(encSB=encSB):
                                return True
            return False
        _st_label_511 = 0
        while (_st_label_511 == 0):
            _st_label_511 += 1
            if ExistentialOpExpr_512():
                _st_label_511 += 1
            else:
                super()._label('_st_label_511', block=True)
                _st_label_511 -= 1
        nB2 = nonce()
        self.send(('msg6', i, encrypt(nB2, key=kAB)), to=A)
        super()._label('_st_label_568', block=False)
        enc_AB = None

        def ExistentialOpExpr_569():
            nonlocal enc_AB
            for (_, (_, _, _BoundPattern587_), (_ConstantPattern589_, _BoundPattern591_, enc_AB)) in self._RoleBReceivedEvent_2:
                if (_BoundPattern587_ == A):
                    if (_ConstantPattern589_ == 'msg7'):
                        if (_BoundPattern591_ == i):
                            if ((nB2 - 1) == decrypt(enc_AB, key=kAB)):
                                return True
            return False
        _st_label_568 = 0
        while (_st_label_568 == 0):
            _st_label_568 += 1
            if ExistentialOpExpr_569():
                _st_label_568 += 1
            else:
                super()._label('_st_label_568', block=True)
                _st_label_568 -= 1
        self.output('B - Key Exchange Complete')
        self._state.terminate = True
    _RoleB_handler_480._labels = None
    _RoleB_handler_480._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([])

    def run(self):
        gc.disable()
        kAS = keygen('shared')
        kBS = keygen('shared')
        S = self.new(RoleS, (kAS, kBS))
        B = self.new(RoleB, (S, kBS))
        A = self.new(RoleA, (S, kAS, B))
        self._start(S)
        self._start(B)
        self._start(A)
