import sys
from sa.signal_timers import dec_proto_run_timer
#import doubleratchet_lib as DR
#import doubleratchet_ext as EXT
from doubleratchet_ext import *
import x3dh_lib as X3DH
exec(open('./doubleratchet_lib.py', 'r').read())

ONETIME_PREKEYS = 5

class RoleA(process):
    def setup(B, S, rounds):
        self.IKP_A = None
        self.IK_A = None
        self.state_A = None
        self.ai = 1

    def fetch_prekey_bundle(b, s):
        send(('request', self.ai, b), to = s)
        await(some(received(('reply', _ai, keybundle_b), from_ = _s)))
        return keybundle_b

    def verify_keybundle(IK_b, sig_b):
        return X3DH.verify(X3DH.decode(IK_b), sig_b)

    def generate_shared_secret(IK_b, SPK_b, OPK_b):
        EKP_A, EPK_A = X3DH.keygen()
        DH1 = X3DH.dh(self.IKP_A, X3DH.decode(SPK_b))
        DH2 = X3DH.dh(EKP_A, X3DH.decode(IK_b))
        DH3 = X3DH.dh(EKP_A, X3DH.decode(SPK_b))
        DHF = DH1 + DH2 + DH3
        if OPK_b != None:
            DH4 = X3DH.dh(EKP_A, X3DH.decode(OPK_b))
            DHF = DHF + DH4
        return X3DH.kdf(DHF), EPK_A

    @dec_proto_run_timer
    def run():
        self.IKP_A, self.IK_A = X3DH.keygen()
        self.state_A = state()
        IK_B, SPK_B, sig_B, (lbl, OPK_B) = fetch_prekey_bundle(B, S)
        if verify_keybundle(IK_B, sig_B):
            SK, EPK_A = generate_shared_secret(IK_B, SPK_B, OPK_B)
            AD = X3DH.encode(self.IK_A) + IK_B
            RatchetInitAlice(self.state_A, SK, SPK_B[1:])
            init_message = b'This is a secret'
            send(('init', self.ai, (X3DH.encode(self.IK_A), X3DH.encode(EPK_A), lbl,
                           RatchetEncrypt(self.state_A, init_message, AD))), to = B)
            for r in range(rounds):
                msg = 'This is message ' + str(r)
                send(('msg', self.ai, r, RatchetEncrypt(self.state_A, msg, AD)), to = B)
                await(some(received(('msg-rep', _ai, q, (rep_hdr, rep_ct)), from_ = _B),
                           has = (q >= r)))
                rep_pt = RatchetDecrypt(self.state_A, rep_hdr, rep_ct, AD)
                #output(rep_pt)
        self.ai += 1

class RoleB(process):
    def setup(S, rounds):
        self.IKP_B = None
        self.IK_B = None
        self.SKP_B = None
        self.SPK_B = None
        self.onetime_private_prekeys = None
        self.oldSKP_B = None
        self.maxKeyID = None
        self.state_B = None
        self.sessions = None
        self.end = False
        self.bi = 1

    def generate_onetime_prekeys():
        onetime_public_prekeys = set()
        for i in range(ONETIME_PREKEYS):
            newKP, newPK = X3DH.keygen()
            newKeyID = 'Bob' + str(self.maxKeyID + i)
            self.onetime_private_prekeys[newKeyID] = newKP
            onetime_public_prekeys.add((newKeyID, X3DH.encode(newPK)))
        self.maxKeyID += i
        return onetime_public_prekeys

    def publish_keys():
        onetime_prekeys = generate_onetime_prekeys()
        send(('publish', self.bi, (X3DH.encode(self.IK_B), X3DH.encode(self.SPK_B),
                          X3DH.sign(self.IKP_B, X3DH.encode(self.SPK_B)),
                          onetime_prekeys)), to = S)

    def update_onetime_prekeys():
        onetime_prekeys = generate_onetime_prekeys()
        send(('update_onetime_prekeys', self.bi, onetime_prekeys), to = S)

    def update_signedprekey():
        self.oldSKP_B = self.SKP_B
        self.SKP_B. self.SPK_B = X3DH.keygen()
        send(('update_signed_prekey', self.bi,
              (X3DH.encode(self.SPK_B),
               X3DH.sign(self.IKP_B, X3DH.encode(self.SPK_B)))), to = S)

    def generate_shared_secret(IK_a, EPK_a, lbl): 
        OKP_B = self.onetime_private_prekeys[lbl]
        DH1 = X3DH.dh(self.SKP_B, X3DH.decode(IK_a))
        DH2 = X3DH.dh(self.IKP_B, X3DH.decode(EPK_a))
        DH3 = X3DH.dh(self.SKP_B, X3DH.decode(EPK_a))
        DHF = DH1 + DH2 + DH3
        if lbl != None:
            DH4 = X3DH.dh(OKP_B, X3DH.decode(EPK_a))
            DHF = DHF + DH4
        return X3DH.kdf(DHF)

    @dec_proto_run_timer
    def run():
        self.end = False
        self.IKP_B, self.IK_B = X3DH.keygen()
        self.SKP_B, self.SPK_B = X3DH.keygen()
        self.onetime_private_prekeys = dict()
        self.oldSKP_B = None
        self.maxKeyID = 0
        self.state_B = state()
        self.sessions = set()
        publish_keys()
        await(self.end)
        self.bi += 1

    def receive(msg=('prekeys_exhausted'), from_ = S):
        update_onetime_prekeys()

    def receive(msg=('init', ai, (IK_A, EPK_A, lbl, (hdr, enc_msg))), from_ = A):
        SK = generate_shared_secret(IK_A, EPK_A, lbl)
        RatchetInitBob(self.state_B, SK, self.SKP_B)
        AD = IK_A + X3DH.encode(IK_B)
        self.sessions.add((A, AD))
        init_msg = RatchetDecrypt(self.state_B, hdr, enc_msg, AD)
        #output(init_msg)

    def receive(msg=('msg', ai, r, (msg_hdr, msg_ct)), from_ = A):
        AD = {y for (x, y) in self.sessions if x == A}.pop()
        msg_pt = RatchetDecrypt(self.state_B, msg_hdr, msg_ct, AD)
        #output(msg_pt)
        rep = 'This is reply ' + str(r)
        send(('msg-rep', ai, r, RatchetEncrypt(self.state_B, rep, AD)), to = A)
        if (r + 1) == self.rounds:
            self.end = True        
        
class RoleS(process):
    def setup():
        self.keybundles = None
        self.end = False

    @dec_proto_run_timer
    def run():
        self.end = False
        self.keybundles = dict()
        await(self.end)

    def receive(msg=('publish', bi, keybundle), from_ = B):
        self.keybundles[B] = keybundle

    def receive(msg=('update_signed_prekey', bi, (new_signed_prekey, new_sig)), from_ = B):
        oldBundle = self.keybundles[B]
        newBundle = (oldBundle[0], new_signed_prekey, new_sig, oldBundle[3])
        self.keybundles[B] = newBundle

    def receive(msg=('update_onetime_prekeys', bi, new_onetime_keys), from_ = B):
        oldBundle = self.keybundles[B]
        newBundle = (oldBundle[0], oldBundle[1], oldBundle[2],
                     oldBundle[3] | new_onetime_keys)
        self.keybundles[B] = newBundle

    def receive(msg=('request', ai, B), from_ = A):
        await(B in self.keybundles)
        IK_B, SPK_B, sig_B, onetime_prekeys_B = self.keybundles[B]
        if len(onetime_prekeys_B) > 0:
            send(('reply', ai, (IK_B, SPK_B, sig_B, onetime_prekeys_B.pop())), to = A)
            if len(onetime_prekeys_B) == 0:
                send(('prekeys_exhausted'), to = B)
        else:
            send(('reply', ai, (IK_B, SPK_B, sig_B, (None, None))), to = A)
        self.end = True
        
def main():
    rounds = int(sys.argv[1]) if len(sys.argv) > 1 else 2
    S = new(RoleS, ())
    B = new(RoleB, (S, rounds))
    A = new(RoleA, (B, S, rounds))
    start(S)
    start(B)
    start(A)
