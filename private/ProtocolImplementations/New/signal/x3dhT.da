import sys
from x3dh_lib import keygen, encrypt, decrypt, sign
from x3dh_lib import verify, kdf, dh, encode, decode
from sa.signal_timers import dec_proto_run_timer

ONETIME_PREKEYS = 5

class RoleA(process):
    def setup(B, S):
        self.IKP_A, self.IK_A = keygen()
        self.count = 0

    @dec_proto_run_timer
    def run():
        keybundle = fetch_prekey_bundle(B)
        if verify_keybundle(keybundle):
            SK, EKP_A = generate_shared_secret(keybundle)
            AD = encode(self.IK_A) + keybundle[0]
            init_message = b'I am a secret'
            #output('Sending init')
            send(('init', (encode(self.IK_A), encode(EKP_A),
                           keybundle[3][0], encrypt(SK, init_message, AD))), to = B)

    def fetch_prekey_bundle(b):
        #output('Sending request')
        send(('request', b), to = S)
        await(some(received(('reply', i, keybundle_b), from_ = S),
                   has = (i > self.count)))
        self.count = i
        #output('Received reply')
        return keybundle_b

    def verify_keybundle(kb):
        return verify(decode(kb[0]), kb[2])

    def generate_shared_secret(kb):
        EKP_A, EPK_A = keygen()
        DH1 = dh(self.IKP_A, decode(kb[1])) # IK_A, SPK_B
        DH2 = dh(EKP_A, decode(kb[0])) # EK_A, IK_B
        DH3 = dh(EKP_A, decode(kb[1])) # EK_A, SPK_B
        DHF = DH1 + DH2 + DH3
        if len(kb) > 3: #one-time key present
            DH4 = dh(EKP_A, decode(kb[3][1])) # EK_A, OPK_B
            DHF = DHF + DH4
        return kdf(DHF), EPK_A

class RoleB(process):
    def setup(S):
        self.IKP_B, self.IK_B = keygen()
        self.SKP_B, self.SPK_B = keygen()
        self.onetime_private_prekeys = dict()
        self.oldSKP_B = None
        self.maxKeyID = 0
        self.end = False
        self.count = 1

    @dec_proto_run_timer
    def run():
        publish_keys()
        self.end = False
        await(self.end)

    def update_signed_prekey():
        self.oldSKP_B = self.SKP_B
        self.SKP_B, self.SPK_B = keygen()

    def generate_onetime_prekeys():
        onetime_public_prekeys = set()
        for i in range(ONETIME_PREKEYS):
            new_kp, new_pk = keygen()
            onetime_private_prekeys['Bob' + str(self.maxKeyID + i)] = new_kp
            onetime_public_prekeys.add(('Bob' + str(self.maxKeyID + i), encode(new_pk)))
        self.maxKeyID = self.maxKeyID + i
        return onetime_public_prekeys        
        
    def publish_keys():
        onetime_prekeys = generate_onetime_prekeys()
        #output('Sending publish')
        send(('publish', self.count,
              (encode(self.IK_B), encode(self.SPK_B),
               sign(self.IKP_B, encode(self.SPK_B)),
               onetime_prekeys)), to = S)
        self.count += 1

    def generate_shared_secret(ib):
        OKP_B = self.onetime_private_prekeys[ib[2]]
        DH1 = dh(self.SKP_B, decode(ib[0]))
        DH2 = dh(self.IKP_B, decode(ib[1]))
        DH3 = dh(self.SKP_B, decode(ib[1]))
        DH4 = dh(OKP_B, decode(ib[1]))
        DHF = DH1 + DH2 + DH3 + DH4
        return kdf(DHF)

    def receive(msg=('init', initBundle), from_ = A):
        #output('Received init')
        SK = generate_shared_secret(initBundle)
        AD = initBundle[0] + encode(self.IK_B)
        init_message = decrypt(SK, initBundle[3], AD)
        #output(init_message)
        self.end = True

class RoleS(process):
    def setup():
        self.keybundles = dict()
        self.end = False
        self.count = 0

    #@dec_proto_run_timer
    def run():
        self.end = False
        await(self.end)

    def receive(msg=('publish', i, keybundle), from_ = B):
        #output('Received publish')
        self.keybundles[B] = keybundle

    def receive(msg=('request', B), from_ = A):
        #output('Received request')
        await(some(received(('publish', i, _), from_ = _B), has = (i > self.count)))
        self.count = i
        IK_B, SPK_B, sig_B, onetime_prekeys_B = self.keybundles[B]
        #output('Sending reply')
        send(('reply', self.count, (IK_B, SPK_B, sig_B, onetime_prekeys_B.pop())), to = A)
        self.end = True
    
def main():
    S = new(RoleS, ())
    B = new(RoleB, (S,))
    A = new(RoleA, (B, S))
    start(S)
    start(B)
    start(A)
