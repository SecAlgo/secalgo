from sa.sec_algo_pycrypto import genkey, sign, verify1 as verify, gen_nonce
class RoleA(process):
    def setup(SK_sig_A, PK_sig_A, B, PK_sig_B, p, g):
        self.A = self
    def run():
        s = gen_nonce(128)
        dh_x, dh_X, _, _ = genkey('dh', dh_p = p, dh_g = g)
        send(('msg1', A, s, dh_X), to = B)
        await(some(received(('msg2', _B, _s, dh_Y, m), from_ = B)))
        if verify((B, s, dh_Y, dh_X, A), m, PK_sig_B) != None:
            send(('msg3', A, s, sign((A, s, dh_X, dh_Y, B), SK_sig_A)), to = B)
            K_AB = pow(dh_Y, dh_x, p)
            dh_x = None
            output('A - Authenticated Exchange of Key Material Complete')
            output('Session Key:', (K_AB, s))
class RoleB(process):
    def setup(SK_sig_B, PK_sig_B, PK_sig_A, p, g):
        self.B = self
    def run():
        await(False)
    def receive(msg=('msg1', A, s, dh_X), from_ = A):
        dh_y, dh_Y, _, _ = genkey('dh', dh_p = p, dh_g = g)
        send(('msg2', B, s, dh_Y, sign((B, s, dh_Y, dh_X, A), SK_sig_B)), to = A)
        K_AB = pow(dh_X, dh_y, p)
        dh_y = None
        await(some(received(('msg3', _A, _s, m), from_ = A)))
        if verify((A, s, dh_X, dh_Y, B), m, PK_sig_A) != None:
            output('B - Authenticated Exchange of Key Material Complete')
            output('Session Key:', (K_AB, s))
def main():
    SK_sig_A, PK_sig_A = genkey('public')
    SK_sig_B, PK_sig_B = genkey('public')
    _, _, dh_g, dh_p = genkey('dh', dh_group = 17)
    A = new(RoleA)
    B = new(RoleB)
    setup(A, (SK_sig_A, PK_sig_A, B, PK_sig_B, dh_p, dh_g))
    setup(B, (SK_sig_B, PK_sig_B, PK_sig_A, dh_p, dh_g))
    start(B)
    start(A)
