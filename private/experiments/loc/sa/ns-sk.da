from sa.secalgo import *
class RoleS (process):
    def setup(kAS, kBS):
        at_fork()
    def run():
        await(False)
    def receive(msg=('msg1', (A, B, nA)), from_ = A):
        kAB = keygen('shared')
        send(('msg2', encrypt((nA, kAB, B, encrypt((kAB, A), key = kBS)), key = kAS)), to = A)
class RoleA (process):
    def setup(S, kAS, B):
        at_fork()
    def run():
        nA = nonce()
        send(('msg1', (self, B, nA)), to = S)
        await(some(received(('msg2', encAS), from_ = _S), has = some((_nA, kAB, _B, encBS) in [decrypt(encAS, key = kAS)])))
        send(('msg3', encBS), to = B)
        await(some(received(('msg4', encBA), from_ = _B)))
        nR = decrypt(encBA, key = kAB)
        send(('msg5', encrypt((nR - 1), key = kAB)), to = B)
        output('A - Key Exchange Complete')
class RoleB (process):
    def setup(S, kBS):
        at_fork()
    def run():
        await(False)
    def receive(msg=('msg3', encBS), from_ = A):
        if some((kAB, _A) in [decrypt(encBS, key = kBS)]):
            nB = nonce()
            send(('msg4', encrypt(nB, key = kAB)), to = A)
            await(some(received(('msg5', encAB), from_ = _A), has = ((nB - 1) == decrypt(encAB, key = kAB))))
            output('B - Key Exchange Complete')
def main():
    kAS = keygen('shared')
    kBS = keygen('shared')
    S = new(RoleS, (kAS, kBS))
    B = new(RoleB, (S, kBS))
    A = new(RoleA, (S, kAS, B))
    start(S)
    start(B)
    start(A)
