from sa.secalgo import *
class RoleS (process):
    def setup(kAS, kBS):
        at_fork()
    def run():
        await(False)
    def receive(msg=('msg4', (encAS, encBS)), from_ = B):
        if some((A, _B, nA, nB) in [decrypt(encAS, key = kAS)]):
            if some((_A, _B, _nA, _nB) in [decrypt(encBS, key = kBS)]):
                kAB = keygen('shared')
                send(('msg5', (encrypt((B, nA, nB, kAB), key = kAS), encrypt((A, nA, nB, kAB), key = kBS))), to = B)
class RoleA (process):
    def setup(S, kAS, B):
        at_fork()
    def run():
        nA = nonce()
        send(('msg1', (self, nA)), to = B)
        await(some(received(('msg2', (_B, nB)), from_ = _B)))
        send(('msg3', encrypt((self, B, nA, nB), key = kAS)), to = B)
        await(some(received(('msg6', (encSA, encBA)), from_ = _B), has = (some((_B, _nA, _nB, kAB) in [decrypt(encSA, key = kAS)]) and some((_nA, _nB) in [decrypt(encBA, key = kAB)]))))
        send(('msg7', encrypt(nB, key = kAB)), to = B)
        output('A - Key Exchange Complete')
class RoleB (process):
    def setup(S, kBS):
        at_fork()
    def run():
        await(False)
    def receive(msg=('msg1', (A, nA)), from_ = _A):
        nB = nonce()
        send(('msg2', (self, nB)), to = A)
        await(some(received(('msg3', encAS), from_ = _A)))
        send(('msg4', (encAS, encrypt((A, self, nA, nB), key = kBS))), to = S)
        await(some(received(('msg5', (encSA, encSB)), from_ = _S), has = some((_A, _nA, _nB, kAB) in [decrypt(encSB, key = kBS)])))
        send(('msg6', (encSA, encrypt((nA, nB), key = kAB))), to = A)
        await(some(received(('msg7', encAB), from_ = _A), has = (decrypt(encAB, key = kAB) == nB)))
        output('B - Key Exchange Complete')
def main():
    kAS = keygen('shared')
    kBS = keygen('shared')
    S = new(RoleS, (kAS, kBS))
    B = new(RoleB, (S, kBS))
    A = new(RoleA, (S, kAS, B))
    start(S)
    start(B)
    start(A)
