from sa.sec_algo_pycrypto import genkey, encrypt, decrypt, gen_nonce
class RoleA (process):
    def setup(KCK, KEK, KDK, P):
        self.A = self
    def run():
        session_id = gen_nonce(256)
        send(('start', A, session_id), to = P)
        await(some(received(('response', session_id, P, nonce_P, binding, MAC1), from_ = P)))
        AuthNonce  = gen_nonce(256)
        nonce_A = encrypt(AuthNonce, KEK)
        MAC2 = aes_cbc_mac_96((A, nonce_P, session_id, nonce_A, binding), KCK)
        send(('confirm', session_id, nonce_A, binding, MAC2), to = P)
        await(some(received(('finish', session_id, MAC3), from_ = P)))
        output('A - Archie Protocol Complete')
class RoleP (process):
    def setup(KCK, KEK, KDK):
        self.P = self
    def run():
        await(False)
    def receive(msg=('start', A, session_id), from_ = A):
        PeerNonce = gen_nonce(256)
        nonce_P = encrypt(PeerNonce, KEK)
        binding = 'uh'
        MAC1 = aes_cbc_mac_96((A, session_id, P, nonce_P, binding), KCK)
        send(('response', session_id, P, nonce_P, binding, MAC1), to = A)
        await(some(received(('confirm', session_id, c_nonce_A, binding, MAC2), from_ = A)))
        MAC3 = aes_cbc_mac_96((session_id,), KCK)
        send(('finish', session_id, MAC3), to = A)
        output('P - Archie Protocol Complete')
def main():
    KCK = genkey('shared', 16)
    KEK = genkey('shared', 16)
    KDK = genkey('shared', 32)
    P = new(RoleP, (KCK, KEK, KDK))
    A = new(RoleA, (KCK, KEK, KDK, P))
    start(P)
    start(A)
def aes_cbc_mac_96(values, key):
    import pickle
    from Crypto.Cipher import AES
    input = b''
    for value in values:
        input += pickle.dumps(value)
    IV = (0).to_bytes(16, byteorder = 'little')
    pad_length = 16 - len(input) % 16
    input = input + bytearray([0] * pad_length)
    n = len(input) // 16
    for i in range(n):
        crypter = AES.new(key, AES.MODE_CBC, IV)
        IV = crypter.encrypt(input[(i*16):((i+1)*16)])
    return IV[0:12]
