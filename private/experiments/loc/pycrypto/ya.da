import pickle
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random import random
from sa.Misc.Padding import pkcs7_pad as pad, pkcs7_unpad as unpad
class RoleS (process):
    def setup(A, B, K_AS, K_BS):
        Random.atfork()
    def run():
        await(False)
    def receive(msg=('msg2', (_B, enc_BS)), from_ = _B):
        cipher_bs = AES.new(K_BS, AES.MODE_CBC, enc_BS[:16])
        A_ret, N_A, N_B = pickle.loads(unpad(cipher_bs.decrypt(enc_BS[16:])))
        if A_ret == A:
            K_AB = Random.new().read(32)
            iv_as = Random.new().read(AES.block_size)
            cipher_as = AES.new(K_AS, AES.MODE_CBC, iv_as)
            iv_bs = Random.new().read(AES.block_size)
            cipher_bs = AES.new(K_BS, AES.MODE_CBC, iv_bs)
            send(('msg3', (iv_as + cipher_as.encrypt(pad(pickle.dumps((B, K_AB, N_A, N_B)))), iv_bs + cipher_bs.encrypt(pad(pickle.dumps((A, K_AB)))))), to = A)
class RoleA (process):
    def setup(B, S, K_AS):
        Random.atfork()
    def run():
        N_A = random.StrongRandom().getrandbits(128)
        send(('msg1', (self, N_A)), to = B)
        await(some(received(('msg3', (enc_SA, enc_SB)), from_ = _S)))
        cipher_as = AES.new(K_AS, AES.MODE_CBC, enc_SA[:16])
        B_ret, K_AB, N_A_ret, N_B = pickle.loads(unpad(cipher_as.decrypt(enc_SA[16:])))
        if B_ret == B:
            if N_A_ret == N_A:
                iv_ab = Random.new().read(AES.block_size)
                cipher_ab = AES.new(K_AB, AES.MODE_CBC, iv_ab)
                send(('msg4', (enc_SB, iv_ab + cipher_ab.encrypt(pad(pickle.dumps(N_B))))), to = B)
                output('A - Key Exchange Complete')
class RoleB (process):
    def setup(S, K_BS):
        Random.atfork()
    def run():
        await(False)
    def receive(msg=('msg1', (A, N_A)), from_ = A):
        N_B = random.StrongRandom().getrandbits(128)
        iv_bs = Random.new().read(AES.block_size)
        cipher_bs = AES.new(K_BS, AES.MODE_CBC, iv_bs)
        send(('msg2', (self, iv_bs + cipher_bs.encrypt(pad(pickle.dumps((A, N_A, N_B)))))), to = S)
        await(some(received(('msg4', (enc_SB, enc_AB)), from_ = _A)))
        cipher_bs = AES.new(K_BS, AES.MODE_CBC, enc_SB[:16])
        A_ret, K_AB = pickle.loads(unpad(cipher_bs.decrypt(enc_SB[16:])))
        if A_ret == A:
            cipher_ab = AES.new(K_AB, AES.MODE_CBC, enc_AB[:16])
            if pickle.loads(unpad(cipher_ab.decrypt(enc_AB[16:]))) == N_B:
                output('B - Key Exchange Complete')
def main():
    K_AS = Random.new().read(32)
    K_BS = Random.new().read(32)
    B = new(RoleB)
    A = new(RoleA)
    S = new(RoleS, (A, B, K_AS, K_BS))
    setup(A, (B, S, K_AS))
    setup(B, (S, K_BS))
    start(S)
    start(B)
    start(A)
