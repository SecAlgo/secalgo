import time, json, sys
from sa.secalgo import encrypt, decrypt, sign, verify, nonce, keygen, configure
class RoleA(process):
    def setup(B):
        pass
    def run():
        secret = 'I am a secret'
        shared_key = keygen('shared')
        mac_key = keygen('mac')
        priv_key, pub_key = keygen('public')
        send(('1', (shared_key, mac_key, pub_key, secret)), to = B)
        output('Sent 1')
        await(some(received(('2', pub_key_B), from_ = _B)))
        output('Received 2')
        send(('3', encrypt(secret, key = shared_key)), to = B)
        output('Sent 3')
        await(some(received(('4'), from_ = _B)))
        output('Received 4')
        send(('5', encrypt(secret, key = pub_key_B)), to = B)
        output('Sent 5')
        await(some(received(('6'), from_ = _B)))
        output('Received 6')
        send(('7', sign(secret, key = mac_key)), to = B)
        output('Sent 7')
        await(some(received(('8'), from_ = _B)))
        output('Received 8')
        send(('9', sign(secret, key = priv_key)), to = B)
        output('Sent 9')
        await(some(received(('10'), from_ = _B)))
        output('Received 10')
        output('RoleA done')
class RoleB(process):
    def setup():
        pass
    def run():
        await(False)
    def receive(msg=('1', (shared_key, mac_key, pub_key_A, secret)), from_ = A):
        output('Received 1')
        priv_key, pub_key = keygen('public')
        send(('2', pub_key), to = A)
        output('Sent 2')
        await(some(received(('3', ct1), from_ = _A), has = (decrypt(ct1, key = shared_key) == secret)))
        output('Received 3')
        send(('4'), to = A)
        output('Sent 4')
        await(some(received(('5', ct2), from_ = _A), has = (decrypt(ct2, key = priv_key) == secret)))
        output('Received 5')
        send(('6'), to = A)
        output('Sent 6')
        await(some(received(('7', sig1), from_ = _A), has = (verify(sig1, key = mac_key) == secret)))
        output('Received 7')
        send(('8'), to = A)
        output('Sent 8')
        await(some(received(('9', sig2), from_ = _A), has = (verify(sig2, key = pub_key_A) == secret)))
        output('Received 9')
        send(('10'), to = A)
        output('Sent 10')
        output('RoleB done')
        exit()
def main():
    B = new(RoleB, ())
    A = new(RoleA, (B,))
    start(B)
    start(A)
