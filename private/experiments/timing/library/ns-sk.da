"""
Needham-Schroeder Symmetric Key Key Exhange Protocol
Written by Christopher Kane

Original Source:
Roger Needham and Michael Schroeder, "Using Encryption for Authentication in 
Large Networks of Computers", Communications of the ACM, v.21.12. Dec., 1978.
pp. 993-999.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.ens-cachan.fr/Software/spore/nssk.html

Protocol Diagram:
  (1) I -> S : (I, R, N_I)
  (2) S -> I : enc((N_I, K_IR, R, enc((K_IR, I), K_RS)), K_IS)
  (3) I -> R : enc((K_IR, I), K_RS)
  (4) R -> I : enc(N_R, K_IR)
  (5) I -> R : enc(N_R - 1, K_IR)
"""
from sa.secalgo import *
configure(benchmark = True)
    
class RoleS (process):
    def setup(K_IS, K_RS):
        pass

    def run():
        await(False)

    def receive(msg=('msg1', (I, R, N_I)), from_ = I):
        K_IR = keygen('shared')
        send(('msg2', encrypt((N_I, K_IR, R, encrypt((K_IR, I), key = K_RS)),
                              key = K_IS)), to = I)
        exit()

class RoleI (process):
    def setup(S, K_IS, R):
        pass

    def run():
        N_I = nonce()
        send(('msg1', (self, R, N_I)), to = S)
        await(some(received(('msg2', enc_IS), from_ = _S),
                   has = ((decrypt(enc_IS, key = K_IS)[0] == N_I) and
                          (decrypt(enc_IS, key = K_IS)[2] == R))))
        _, K_IR, _, enc_RS = decrypt(enc_IS, key = K_IS)
        send(('msg3', enc_RS), to = R)
        await(some(received(('msg4', enc_RI), from_ = _R)))
        N_R = decrypt(enc_RI, key = K_IR)
        send(('msg5', encrypt((N_R - 1), key = K_IR)), to = R)
        output('I - Key Exchange Complete')

class RoleR (process):
    def setup(S, K_RS):
        pass
    
    def run():
        await(False)

    def receive(msg=('msg3', enc_RS), from_ = I):
        I == decrypt(enc_RS, key = K_RS)[1]
        K_IR = decrypt(enc_RS, key = K_RS)[0]
        N_R = nonce()
        send(('msg4', encrypt(N_R, key = K_IR)), to = I)
        await(some(received(('msg5', enc_IR), from_ = _I),
                   has = ((N_R - 1) == decrypt(enc_IR, key = K_IR))))
        output('R - Key Exchange Complete')
        exit()

def main():
    K_IS = keygen('shared')
    K_RS = keygen('shared')
    S = new(RoleS, (K_IS, K_RS))
    R = new(RoleR, (S, K_RS))
    I = new(RoleI, (S, K_IS, R))
    start(S)
    start(R)
    start(I)
