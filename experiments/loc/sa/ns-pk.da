from sa.secalgo import *
class roleS (process):
    def setup(skS, client_keys):
        pass
    def run():
        await(False)
    def receive(msg=('msg1', (I, R)), from_ = I):
        pkR = [x for (p, x) in client_keys if p == R].pop()
        send(('msg2', sign((R, pkR), skS)), to = I)
    def receive(msg=('msg4', (R, I)), from_ = IR):
        pkI = [x for (p, x) in client_keys if p == I].pop()
        send(('msg5', sign((I, pkI), skS)), to = R)
class roleI (process):
    def setup(skI, S, pkS, R):
        pass
    def run():
        send(('msg1', (self, R)), to = S)
        await(some(received(('msg2', sig_S), from_ = _S), has = some((_R, pkR) in [verify(sig_S, key = pkS)])))
        nI = nonce()
        send(('msg3', encrypt((nI, self), key = pkR)), to = R)
        await(some(received(('msg6', enc_RI), from_ = _R), has = some((_nI, nR) in [decrypt(enc_RI, key = skI)])))
        send(('msg7', encrypt(nR, key = pkR)), to = R)
        output('I authenticated R')
class roleR (process):
    def setup(skR, S, pkS):
                pass
    def run():
        if await(False): pass
        elif timeout(10): pass
    def receive(msg=('msg3', enc_IR), from_ = I):
        I == decrypt(enc_IR, key = skR)[1]
        nI = decrypt(enc_IR, key = skR)[0]
        send(('msg4', (self, I)), to = S)
        await(some(received(('msg5', sig_S), from_ = _S), has = (verify(sig_S, key = pkS)[0] == I)))
        pkI = verify(sig_S, key = pkS)[1]
        nR = nonce()
        send(('msg6', encrypt((nI, nR, self), key = pkI)), to = I)
        await(some(received(('msg7', enc_IR2), from_ = _I), has = (decrypt(enc_IR2, key = skR) == nR)))
        output('R authenticated I')
def main():
    skS, pkS = keygen('public')
    skI, pkI = keygen('public')
    skR, pkR = keygen('public')
    I = new(roleI)
    R = new(roleR)
    S = new(roleS)
    setup(S, (skS, [(I, pkI), (R, pkR)]))
    setup(I, (skI, S, pkS, R))
    setup(R, (skR, S, pkS))
    start(S)
    start(R)
    start(I)
