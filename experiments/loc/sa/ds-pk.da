import time
from sa.secalgo import *
configure(verify_returns = 'bool')
class roleA(process):
    def setup(B, S, sk_A, pk_A, pk_S):
        pass
    def run():
        send(('msg01', self, B), to = S)
        await(some(received(('msg02', (A, _pk_A, t_A, sig_A), (_B, pk_B, t_B, sig_B)), from_ = S), has = (A == self)))
        if (verify(((A, pk_A, t_A), sig_A), pk_S) and verify(((B, pk_B, t_B), sig_B), pk_S)):
            k_AB = keygen('shared')
            t_AB = time.time()
            send(('msg03', (A, pk_A, t_A, sig_A), (B, pk_B, t_B, sig_B), encrypt(((k_AB, t_AB), sign((k_AB, t_AB), sk_A)), pk_B)), to = B)
            output('Initiator: Key Exchange Complete')
        else:
            output('Initiator: Could not verify certificates')
class roleB(process):
    def setup(S, sk_B, pk_B, pk_S):
        pass
    def run():
        await(some(received(('msg03', (A, pk_A, t_A, sig_A), (B, _pk_B, t_B, sig_B), encrypted_key), from_ = A), has = (B == self)))
        if (verify(((A, pk_A, t_A), sig_A), pk_S) and verify(((B, pk_B, t_B), sig_B), pk_S)):
            (k_AB, t_AB), sig_AB = decrypt(encrypted_key, sk_B)
            if verify(((k_AB, t_AB), sig_AB), pk_A):
                output('Recipient: Key Exchange Complete')
            else:
                output('Recipient: Could not verify signature on shared key')
        else:
            output('Recipient: Could not verify certificates')
class roleS(process):
    def setup(sk_S, pk_S, client_keys):
        pass
    def run():
        await(some(received(('msg01', A, B), from_ = A)))
        pk_A = [x for (p, x) in client_keys if p == A].pop()
        pk_B = [x for (p, x) in client_keys if p == B].pop()
        t_A = t_B = time.time()
        send(('msg02', (A, pk_A, t_A, sign((A, pk_A, t_A), sk_S)), (B, pk_B, t_B, sign((B, pk_B, t_B), sk_S))), to = A)
        output('Server: Certificates Sent')
def main():
    sk_S, pk_S = keygen('public')
    sk_A, pk_A = keygen('public')
    sk_B, pk_B = keygen('public')
    S = new(roleS)
    B = new(roleB, (S, sk_B, pk_B, pk_S))
    A = new(roleA, (B, S, sk_A, pk_A, pk_S))
    setup(S, (sk_S, pk_S, [(A, pk_A), (B, pk_B)]))
    start(S)
    start(B)
    start(A)
