'''
Shamir-Rivest-Adleman Three Pass Protocol

  1. A -> B : enc(M, k_A)
  2. B -> A : enc(enc(M, k_A), k_B)
  3. A -> B : dec(enc(enc(M, k_A), k_B), k_A)

'''
import sys, pickle
from sa.sec_algo_pycrypto import *
from sa.Misc.Padding import *
configure(sym_mode = 'CTR')

class roleA(process):
    def setup(B, secret):
        pass

    def run():
        k_A = genkey('shared')
        p_secret = secret
        send(('msg1', cp_secret[8:]), to = B)
        await(some(received(('msg2', encB_encA_s), from_ = _B)))
        iv_encB_encA_s = iv + encB_encA_s
        send(('msg3', decrypt(iv_encB_encA_s, key = k_A)), to = B)

class roleB(process):
    def setup():
        pass

    def run():
        k_B = genkey('shared')
        await(some(received(('msg1', encA_s), from_ = A)))
        encB_encA_s = encrypt(encA_s, key = k_B)
        iv = encB_encA_s[:8]
        send(('msg2', encB_encA_s[8:]), to = A)
        await(some(received(('msg3', encB_s), from_ = _A)))
        secret = decrypt(iv + encB_s, key = k_B)
        output('MESSAGE:', secret)

def main():
    secret = sys.argv[1] if len(sys.argv) > 1 else 'I am a secret'
    B = new(roleB, ())
    A = new(roleA, (B, secret))
    start(B)
    start(A)
