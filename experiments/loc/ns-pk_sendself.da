from sa.secalgo import *
class roleS (process):
    def setup(skS, client_keys):
        pass
    def run():
        if await(False): pass
        elif timeout(60): pass
    def receive(msg=(A, B), from_ = A):
        pkB = [x for (p, x) in client_keys if p == B].pop()
        send(('signed', sign((B, pkB), skS)), to = A)
class roleI (process):
    def setup(skI, S, pkS, R):
        self.I = self
    def run():
        send((I, R), to = S)
        await(some(received(((_R, pkR), _S), from_ = self)))
        nI = nonce()
        send(('pub_enc', encrypt((nI, I), pkR)), to = R)
        await(some(received(((_nI, nR, _R), _R), from_ = self)))
        send(('pub_enc', encrypt(nR, pkR)), to = R)
        output('I authenticated R')
    def receive(msg=('signed', m), from_ = S):
        send((verify(m, pkS), S), to = self)
    def receive(msg=('pub_enc', m), from_ = R):
        send((decrypt(m, skI), R), to = self)
class roleR (process):
    def setup(skR, S, pkS):
        self.R = self
    def run():
        if await(False): pass
        elif timeout(60): pass
    def receive(msg=((nI, I), I), from_ = self):
        send((R, I), to = S)
        await(some(received(((_I, pkI), _S), from_ = self)))
        nR = nonce()
        send(('pub_enc', encrypt((nI, nR, R), pkI)), to = I)
        await(some(received((_nR, _I), from_ = self)))
        output('R authenticated I')
    def receive(msg=('signed', m), from_ = S):
        send((verify(m, pkS), S), to = self)
    def receive(msg=('pub_enc', m), from_ = I):
        send((decrypt(m, skR), I), to = self)
def main():
    skS, pkS = keygen('public')
    skI, pkI = keygen('public')
    skR, pkR = keygen('public')
    I = new(roleI)
    R = new(roleR)
    S = new(roleS)
    setup(S, (skS, [(I, pkI), (R, pkR)]))
    setup(I, (skI, S, pkS, R))
    setup(R, (skR, S, pkS))
    start(S)
    start(R)
    start(I)
