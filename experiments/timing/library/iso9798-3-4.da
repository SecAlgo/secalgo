'''
ISO 9798-3-4 Three-Pass Mutual Authentication

Original Source:
ISO/IEC 9798-3, 1998, p. 4

Reference Sources:
John Clark and Jeremy Jacob, "A Survey of Authentication Protocol Literature",
Version 1.0, 1997.

AVISPA: ISO4

Scyther: iso-iec-9798-3-4

Protocol Diagram:
  (1) B -> A : N_B, Text1
  (2) A -> B : Cert_A, N_A, N_B, B, Text3, sign((N_A, N_B, B, Text2), SK_sig_A)
  (3) B -> A : Cert_B, N_B, N_A, A, Text5, sign((N_B, N_A, A, Text4), SK_sig_B)

Cert_I is certificate granted by a certification authority for the purpose of
authenticating the association between user I's and her public key. 
Certificates are option, and are not currently included in the implementation.

N_I is a nonce generated by I. 

TextX fields are optional fields that can be used for application specific
purposes within applications that make use of this protocol.
'''
from sa.secalgo import *
configure(benchmark = True)
configure(verify_returns = 'bool')

class RoleA(process):
    def setup(SK_sig_A, PK_sig_A, PK_sig_B):
        self.A = self

    def run():
        await(False)

    def receive(msg=('msg1', N_B, 'Text1'), from_ = B):
        N_A = nonce(128)
        send(('msg2', N_A, N_B, B, 'Text3', sign((N_A, N_B, B, 'Text2'), key = SK_sig_A)), to = B)
        await(some(received(('msg3', _N_B, _N_A, _A, 'Text5', m), from_ = B)))
        #currently assuming that A has authenticated B's public key, PK_sig_B,
        #in some unknown way, certificates will be used for this.
        if verify(((N_B, N_A, A, 'Text4'), m), key = PK_sig_B) != None:
            output('A - Authentication Complete')

class RoleB(process):
    def setup(SK_sig_B, PK_sig_B, A, PK_sig_A):
        self.B = self

    def run():
        N_B = nonce(128)
        send(('msg1', N_B, 'Text1'), to = A)
        await(some(received(('msg2', N_A, _N_B, _B, 'Text3', m), from_ = A)))
        #currently assuming that B has authenticated A's public key, PK_sig_A,
        #in some unknown way, certificates will be used for this.
        if verify(((N_A, N_B, B, 'Text2'), m), key = PK_sig_A) != None:
            send(('msg3', N_B, N_A, A, 'Text5', sign((N_B, N_A, A, 'Text4'), key = SK_sig_B)), to = A)
            output('B - Authentication Complete')

def main():
    SK_sig_A, PK_sig_A = keygen('public')
    SK_sig_B, PK_sig_B = keygen('public')
    A = new(RoleA)
    B = new(RoleB)
    setup(A, (SK_sig_A, PK_sig_A, PK_sig_B))
    setup(B, (SK_sig_B, PK_sig_B, A, PK_sig_A))
    start(A)
    start(B)
    
