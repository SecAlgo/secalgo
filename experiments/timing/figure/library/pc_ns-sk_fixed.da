"""
Needham-Schroeder Symmetric Key Key Exhange Protocol
Written by Christopher Kane

Original Source:
R. Needham and M. Schroeder. "Authentication revisited". 
Operating Systems Review, 21(7), January 1987.

Immediate Source:
Security Protocol Open Repository
http://www.lsv.fr/Software/spore/nssk_amended.html

Protocol Diagram:
  (1) A -> B : A
  (2) B -> A : enc((A, nB1), kBS)
  (3) A -> S : (A, B, nA, enc((A, nB1), kBS))
  (4) S -> A : enc((nA, kAB, B, enc((kAB, nB1, A), kBS)), kAS)
  (5) A -> B : enc((kAB, nB1, A), kBS)
  (6) B -> A : enc(nB2, kAB)
  (7) A -> B : enc(nB2 - 1, kAB)
"""

import pickle
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random import random
from sa.Misc.Padding import pkcs7_pad as pad, pkcs7_unpad as unpad
    
class RoleS (process):
    def setup(kAS, kBS, loops):
        Random.atfork()
        self.results = []

    def run():
        await(False)

    def receive(msg=('msg3', (A, B, nA, encBS)), from_ = _A):
        cipher = AES.new(kBS, AES.MODE_CBC, encBS[:AES.block_size])
        if some((_A, nB1) in [pickle.loads(unpad(cipher.decrypt(encBS[AES.block_size:])))]):
            kAB = Random.new().read(32)
            ivB = Random.new().read(AES.block_size)
            cipherB = AES.new(kBS, AES.MODE_CBC, ivB)
            ivA = Random.new().read(AES.block_size)
            cipherA = AES.new(kAS, AES.MODE_CBC, ivA)
            send(('msg4', ivA + cipherA.encrypt(pad(pickle.dumps((nA, kAB, B,
                    ivB + cipherB.encrypt(pad(pickle.dumps((kAB, nB1, A))))))))), to = A)

class RoleA (process):
    def setup(S, kAS, B):
        Random.atfork()

    def run():
        send(('msg1', self), to = B)

        await(some(received(('msg2', encBS), from_ = _B)))

        nA = random.StrongRandom().getrandbits(128)
        send(('msg3', (self, B, nA, encBS)), to = S)

        await(some(received(('msg4', encAS), from_ = _S)))
        cipherAS = AES.new(kAS, AES.MODE_CBC, encAS[:AES.block_size])
        if some((_nA, kAB, _B, encSB) in
                [pickle.loads(unpad(cipherAS.decrypt(encAS[AES.block_size:])))]):
            
            send(('msg5', encSB), to = B)

            await(some(received(('msg6', encBA), from_ = _B)))
            cipherBA = AES.new(kAB, AES.MODE_CBC, encBA[:AES.block_size])
            nB = pickle.loads(unpad(cipherBA.decrypt(encBA[AES.block_size:])))

            ivAB = Random.new().read(AES.block_size)
            cipherAB = AES.new(kAB, AES.MODE_CBC, ivAB)
            send(('msg7', ivAB + cipherAB.encrypt(pad(pickle.dumps((nB - 1))))), to = B)
            output('A - Key Exchange Complete')

class RoleB (process):
    def setup(S, kBS):
        Random.atfork()
    
    def run():
        await(False)

    def receive(msg=('msg1', A), from_ = _A):
        nB1 = random.StrongRandom().getrandbits(128)
        
        ivBS = Random.new().read(AES.block_size)
        cipherBS = AES.new(kBS, AES.MODE_CBC, ivBS)
        send(('msg2', ivBS + cipherBS.encrypt(pad(pickle.dumps((A, nB1))))), to = A)
        
        await(some(received(('msg5', encSB), from_ = _A)))
        cipherBS = AES.new(kBS, AES.MODE_CBC, encSB[:AES.block_size])
        if some((kAB, _nB1, _A) in
                [pickle.loads(unpad(cipherBS.decrypt(encSB[AES.block_size:])))]):
        
            nB2 = random.StrongRandom().getrandbits(128)
            
            ivBA = Random.new().read(AES.block_size)
            cipherBA = AES.new(kAB, AES.MODE_CBC, ivBA)
            send(('msg6', ivBA + cipherBA.encrypt(pad(pickle.dumps(nB2)))), to = A)
        
            await(some(received(('msg7', encAB), from_ = _A)))
            cipherAB = AES.new(kAB, AES.MODE_CBC, encAB[:AES.block_size])
            if (nB2 - 1) == pickle.loads(unpad(cipherAB.decrypt(encAB[AES.block_size:]))):
                output('B - Key Exchange Complete')
        
def main():
    kAS = Random.new().read(32)
    kBS = Random.new().read(32)
    S = new(RoleS, (kAS, kBS))
    B = new(RoleB, (S, kBS))
    A = new(RoleA, (S, kAS, B))
    start(S)
    start(B)
    start(A)
