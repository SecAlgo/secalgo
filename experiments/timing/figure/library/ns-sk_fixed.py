# -*- generated by 1.0.12 -*-
import da
PatternExpr_190 = da.pat.TuplePattern([da.pat.ConstantPattern('msg3'), da.pat.TuplePattern([da.pat.FreePattern('I1'), da.pat.FreePattern('R'), da.pat.FreePattern('N_I'), da.pat.FreePattern('enc_RS')])])
PatternExpr_204 = da.pat.FreePattern('I')
PatternExpr_393 = da.pat.TuplePattern([da.pat.ConstantPattern('msg2'), da.pat.FreePattern('enc_RS')])
PatternExpr_400 = da.pat.BoundPattern('_BoundPattern401_')
PatternExpr_459 = da.pat.TuplePattern([da.pat.ConstantPattern('msg4'), da.pat.FreePattern('enc_IS')])
PatternExpr_466 = da.pat.BoundPattern('_BoundPattern467_')
PatternExpr_537 = da.pat.TuplePattern([da.pat.ConstantPattern('msg6'), da.pat.FreePattern('enc_RI')])
PatternExpr_544 = da.pat.BoundPattern('_BoundPattern545_')
PatternExpr_667 = da.pat.TuplePattern([da.pat.ConstantPattern('msg1'), da.pat.FreePattern('I1')])
PatternExpr_674 = da.pat.FreePattern('I2')
PatternExpr_753 = da.pat.TuplePattern([da.pat.ConstantPattern('msg5'), da.pat.FreePattern('enc_SR')])
PatternExpr_760 = da.pat.BoundPattern('_BoundPattern761_')
PatternExpr_887 = da.pat.TuplePattern([da.pat.ConstantPattern('msg7'), da.pat.FreePattern('enc_IR')])
PatternExpr_894 = da.pat.BoundPattern('_BoundPattern895_')
_config_object = {}
import time, sys, json
from sa.secalgo import *

class RoleS(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleSReceivedEvent_0', PatternExpr_190, sources=[PatternExpr_204], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleS_handler_189])])

    def setup(self, K_IS, K_RS, loops, **rest_1029):
        super().setup(K_IS=K_IS, K_RS=K_RS, loops=loops, **rest_1029)
        self._state.K_IS = K_IS
        self._state.K_RS = K_RS
        self._state.loops = loops
        at_fork()
        self._state.results = []

    def run(self):
        super()._label('_st_label_185', block=False)
        _st_label_185 = 0
        while (_st_label_185 == 0):
            _st_label_185 += 1
            if False:
                _st_label_185 += 1
            else:
                super()._label('_st_label_185', block=True)
                _st_label_185 -= 1

    def _RoleS_handler_189(self, I1, R, N_I, enc_RS, I):
        start_time = time.process_time()
        for i1 in range(self._state.loops):
            (I2, N1_R) = decrypt(enc_RS, key=self._state.K_RS)
        self._state.results.append(['decrypt', start_time, time.process_time(), self._state.loops])
        if (I2 == I1):
            start_time = time.process_time()
            for i2 in range(self._state.loops):
                K_IR = keygen('shared')
            self._state.results.append(['keygen', start_time, time.process_time(), self._state.loops])
            start_time = time.process_time()
            for i3 in range(self._state.loops):
                encSR = encrypt((K_IR, N1_R, I2), key=self._state.K_RS)
            self._state.results.append(['encrypt', start_time, time.process_time(), self._state.loops])
            start_time = time.process_time()
            for i4 in range(self._state.loops):
                encSI = encrypt((N_I, K_IR, R, encSR), key=self._state.K_IS)
            self._state.results.append(['encrypt', start_time, time.process_time(), self._state.loops])
            self.send(('msg4', encSI), to=I)
        for result in self._state.results:
            print(result)
        self.exit()
    _RoleS_handler_189._labels = None
    _RoleS_handler_189._notlabels = None

class RoleI(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleIReceivedEvent_0 = []
        self._RoleIReceivedEvent_1 = []
        self._RoleIReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_0', PatternExpr_393, sources=[PatternExpr_400], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_1', PatternExpr_459, sources=[PatternExpr_466], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleIReceivedEvent_2', PatternExpr_537, sources=[PatternExpr_544], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, K_IS, R, loops, **rest_1029):
        super().setup(S=S, K_IS=K_IS, R=R, loops=loops, **rest_1029)
        self._state.S = S
        self._state.K_IS = K_IS
        self._state.R = R
        self._state.loops = loops
        at_fork()
        self._state.results = []

    def run(self):
        self.send(('msg1', self._id), to=self._state.R)
        super()._label('_st_label_390', block=False)
        enc_RS = None

        def ExistentialOpExpr_391():
            nonlocal enc_RS
            for (_, (_, _, _BoundPattern408_), (_ConstantPattern410_, enc_RS)) in self._RoleIReceivedEvent_0:
                if (_BoundPattern408_ == self._state.R):
                    if (_ConstantPattern410_ == 'msg2'):
                        if True:
                            return True
            return False
        _st_label_390 = 0
        while (_st_label_390 == 0):
            _st_label_390 += 1
            if ExistentialOpExpr_391():
                _st_label_390 += 1
            else:
                super()._label('_st_label_390', block=True)
                _st_label_390 -= 1
        start_time = time.process_time()
        for i5 in range(self._state.loops):
            N_I = nonce()
        self._state.results.append(['nonce', start_time, time.process_time(), self._state.loops])
        self.send(('msg3', (self._id, self._state.R, N_I, enc_RS)), to=self._state.S)
        super()._label('_st_label_456', block=False)
        enc_IS = None

        def ExistentialOpExpr_457():
            nonlocal enc_IS
            for (_, (_, _, _BoundPattern474_), (_ConstantPattern476_, enc_IS)) in self._RoleIReceivedEvent_1:
                if (_BoundPattern474_ == self._state.S):
                    if (_ConstantPattern476_ == 'msg4'):
                        if True:
                            return True
            return False
        _st_label_456 = 0
        while (_st_label_456 == 0):
            _st_label_456 += 1
            if ExistentialOpExpr_457():
                _st_label_456 += 1
            else:
                super()._label('_st_label_456', block=True)
                _st_label_456 -= 1
        start_time = time.process_time()
        for i6 in range(self._state.loops):
            (N_I2, K_IR, R2, enc_SR) = decrypt(enc_IS, key=self._state.K_IS)
        self._state.results.append(['decrypt', start_time, time.process_time(), self._state.loops])
        if ((N_I2 == N_I) and (R2 == self._state.R)):
            self.send(('msg5', enc_SR), to=self._state.R)
            super()._label('_st_label_534', block=False)
            enc_RI = None

            def ExistentialOpExpr_535():
                nonlocal enc_RI
                for (_, (_, _, _BoundPattern552_), (_ConstantPattern554_, enc_RI)) in self._RoleIReceivedEvent_2:
                    if (_BoundPattern552_ == self._state.R):
                        if (_ConstantPattern554_ == 'msg6'):
                            if True:
                                return True
                return False
            _st_label_534 = 0
            while (_st_label_534 == 0):
                _st_label_534 += 1
                if ExistentialOpExpr_535():
                    _st_label_534 += 1
                else:
                    super()._label('_st_label_534', block=True)
                    _st_label_534 -= 1
            start_time = time.process_time()
            for i7 in range(self._state.loops):
                N_R = decrypt(enc_RI, key=K_IR)
            self._state.results.append(['decrypt', start_time, time.process_time(), self._state.loops])
            start_time = time.process_time()
            for i8 in range(self._state.loops):
                encIR = encrypt((N_R - 1), key=K_IR)
            self._state.results.append(['encrypt', start_time, time.process_time(), self._state.loops])
            self.send(('msg7', encIR), to=self._state.R)
            self.output('I - Key Exchange Complete')
        for result in self._state.results:
            print(result)

class RoleR(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._RoleRReceivedEvent_1 = []
        self._RoleRReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_0', PatternExpr_667, sources=[PatternExpr_674], destinations=None, timestamps=None, record_history=None, handlers=[self._RoleR_handler_666]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_1', PatternExpr_753, sources=[PatternExpr_760], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_RoleRReceivedEvent_2', PatternExpr_887, sources=[PatternExpr_894], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, S, K_RS, loops, **rest_1029):
        super().setup(S=S, K_RS=K_RS, loops=loops, **rest_1029)
        self._state.S = S
        self._state.K_RS = K_RS
        self._state.loops = loops
        at_fork()
        self._state.results = []

    def run(self):
        super()._label('_st_label_662', block=False)
        _st_label_662 = 0
        while (_st_label_662 == 0):
            _st_label_662 += 1
            if False:
                _st_label_662 += 1
            else:
                super()._label('_st_label_662', block=True)
                _st_label_662 -= 1

    def _RoleR_handler_666(self, I1, I2):
        if (I1 == I2):
            start_time = time.process_time()
            for i9 in range(self._state.loops):
                N1_R = nonce()
            self._state.results.append(['nonce', start_time, time.process_time(), self._state.loops])
            start_time = time.process_time()
            for i10 in range(self._state.loops):
                encRS = encrypt((I1, N1_R), key=self._state.K_RS)
            self._state.results.append(['encrypt', start_time, time.process_time(), self._state.loops])
            self.send(('msg2', encRS), to=I1)
            super()._label('_st_label_750', block=False)
            enc_SR = None

            def ExistentialOpExpr_751():
                nonlocal enc_SR
                for (_, (_, _, _BoundPattern768_), (_ConstantPattern770_, enc_SR)) in self._RoleRReceivedEvent_1:
                    if (_BoundPattern768_ == I1):
                        if (_ConstantPattern770_ == 'msg5'):
                            if True:
                                return True
                return False
            _st_label_750 = 0
            while (_st_label_750 == 0):
                _st_label_750 += 1
                if ExistentialOpExpr_751():
                    _st_label_750 += 1
                else:
                    super()._label('_st_label_750', block=True)
                    _st_label_750 -= 1
            start_time = time.process_time()
            for i11 in range(self._state.loops):
                (K_IR, N1_R2, I3) = decrypt(enc_SR, key=self._state.K_RS)
            self._state.results.append(['decrypt', start_time, time.process_time(), self._state.loops])
            if ((N1_R2 == N1_R) and (I3 == I1)):
                start_time = time.process_time()
                for i12 in range(self._state.loops):
                    N2_R = nonce()
                self._state.results.append(['nonce', start_time, time.process_time(), self._state.loops])
                start_time = time.process_time()
                for i13 in range(self._state.loops):
                    encRI = encrypt(N2_R, key=K_IR)
                self._state.results.append(['encrypt', start_time, time.process_time(), self._state.loops])
                self.send(('msg6', encRI), to=I1)
                super()._label('_st_label_884', block=False)
                enc_IR = None

                def ExistentialOpExpr_885():
                    nonlocal enc_IR
                    for (_, (_, _, _BoundPattern902_), (_ConstantPattern904_, enc_IR)) in self._RoleRReceivedEvent_2:
                        if (_BoundPattern902_ == I1):
                            if (_ConstantPattern904_ == 'msg7'):
                                if True:
                                    return True
                    return False
                _st_label_884 = 0
                while (_st_label_884 == 0):
                    _st_label_884 += 1
                    if ExistentialOpExpr_885():
                        _st_label_884 += 1
                    else:
                        super()._label('_st_label_884', block=True)
                        _st_label_884 -= 1
                start_time = time.process_time()
                for i14 in range(self._state.loops):
                    N2_R2 = decrypt(enc_IR, key=K_IR)
                self._state.results.append(['decrypt', start_time, time.process_time(), self._state.loops])
                if (N2_R2 == (N2_R - 1)):
                    self.output('R - Key Exchange Complete')
        for result in self._state.results:
            print(result)
        self.exit()
    _RoleR_handler_666._labels = None
    _RoleR_handler_666._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        loops = (int(sys.argv[1]) if (len(sys.argv) > 1) else 1000)
        K_IS = keygen('shared')
        K_RS = keygen('shared')
        S = self.new(RoleS, (K_IS, K_RS, loops))
        R = self.new(RoleR, (S, K_RS, loops))
        I = self.new(RoleI, (S, K_IS, R, loops))
        self._start(S)
        self._start(R)
        self._start(I)
