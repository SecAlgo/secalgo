"""
Simplified Denning-Sacco Key Exchange Protocol
Written by Christopher Kane

Original Source:
Dorothy Denning and Giovanni Sacco, "Timestamps in Key Distribution Protocols",
Communications of the ACM, v.24.8, Aug. 1981. p. 533-536.

Immediate Source:
Bruno Blanchett, "Security Protocol Verification: Symbolic and Computational 
Models", ETAPS Invited Talk, 2012. 

This simplified version removes the keyserver used to distribute the public keys
for A and B.

Protocol Diagram:
  (1) A -> B: enc(sign(k, skA), pkB)
  (2) B -> A: enc(s, k)
"""
import sys, time, json
from sa.secalgo import *

class RoleA (process):
    def setup(skA, B, pkB, loops):
        at_fork()

    def run():
        start_time = time.process_time()
        for i in range(loops):
            result = ds(i)
        print(json.dumps(['ds', 'roleA', start_time, time.process_time(), loops]))

    def ds(i):
        k = keygen('shared')
        send(('msg01', i, encrypt(sign(k, skA), pkB)), to = B)
        await(some(received(('msg02', _i, m), from_ = _B)))
        s = decrypt(m, k)
        output('DECRYPTED MESSAGE:', s)
        return i

class RoleB (process):
    def setup(skB, pkA, loops):
        at_fork()
        self.start_time = 0
        self.s = 'secret'

    def run():
        self.start_time = time.process_time()
        await(False)

    def receive(msg=('msg01', i, m), from_ = A):
        k = verify(decrypt(m, skB), pkA)
        send(('msg02', i, encrypt(s, k)), to = A)
        if i == (loops - 1):
            print(json.dumps(['ds', 'roleB', start_time, time.process_time(), loops]))
            exit()
            
def main():
    loops = int(sys.argv[1]) if len(sys.argv) > 1 else 1000
    skA, pkA = keygen('public')
    skB, pkB = keygen('public')
    B = new(RoleB, (skB, pkA, loops))
    A = new(RoleA, (skA, B, pkB, loops))
    start(A)
    start(B)
