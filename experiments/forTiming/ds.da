"""
Simplified Denning-Sacco Key Exchange Protocol
Written by Christopher Kane

Original Source:
Dorothy Denning and Giovanni Sacco, "Timestamps in Key Distribution Protocols",
Communications of the ACM, v.24.8, Aug. 1981. p. 533-536.

Immediate Source:
Bruno Blanchett, "Security Protocol Verification: Symbolic and Computational 
Models", ETAPS Invited Talk, 2012. 

This simplified version removes the keyserver used to distribute the public keys
for A and B.

Protocol Diagram:
  (1) A -> B: enc(sign(k, skA), pkB)
  (2) B -> A: enc(s, k)
"""
import time, json, sys
from sa.secalgo import *

class RoleI (process):
    def setup(skI, R, pkR, loops):
        pass

    def run():
        start_time = time.process_time()
        for i in range(loops):
            result = ds(i)
            await(result == i)
        print(json.dumps(['ds', 'roleI', start_time, time.process_time(), loops]), flush = True)
    
    def ds(i):
        k = keygen('shared')
        send(('encrypt_sign', i, encrypt(sign(k, skI), pkR)), to = R)
        await(some(received((_i, m), from_ = R)))
        s = decrypt(m, k)
        output('DECRYPTED MESSAGE:', s)
        return i

class RoleR (process):
    def setup(skR, pkI, loops):
        self.s = 'secret'
        self.start_time = 0

    def run():
        self.start_time = time.process_time()
        await(False)
        #if await(False): pass
        #elif timeout(10): pass

    def receive(msg=('encrypt_sign', i, m), from_ = I):
        k = verify(decrypt(m, skR), pkI)
        output(i)
        output(k)
        send((i, encrypt(s, k)), to = I)
        if i == (loops - 1):
            print(json.dumps(['ds', 'roleR', self.start_time, time.process_time(), loops]),
                  flush = True)

def main():
    loops = int(sys.argv[1]) if len(sys.argv) > 1 else 1000
    skI, pkI = keygen('public')
    skR, pkR = keygen('public')
    R = new(RoleR, (skR, pkI, loops))
    I = new(RoleI, (skI, R, pkR, loops))
    start(I)
    start(R)
